/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.Keys;
import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgForeignTableRecord;

import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgForeignTable extends TableImpl<PgForeignTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_foreign_table</code>
     */
    public static final PgForeignTable PG_FOREIGN_TABLE = new PgForeignTable();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PgForeignTableRecord> getRecordType() {
        return PgForeignTableRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_foreign_table.ftrelid</code>.
     */
    public final TableField<PgForeignTableRecord, Long> FTRELID = createField(DSL.name("ftrelid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_foreign_table.ftserver</code>.
     */
    public final TableField<PgForeignTableRecord, Long> FTSERVER = createField(DSL.name("ftserver"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_foreign_table.ftoptions</code>.
     */
    public final TableField<PgForeignTableRecord, String[]> FTOPTIONS = createField(DSL.name("ftoptions"), SQLDataType.CLOB.array(), this, "");

    private PgForeignTable(Name alias, Table<PgForeignTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgForeignTable(Name alias, Table<PgForeignTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_foreign_table</code> table
     * reference
     */
    public PgForeignTable(String alias) {
        this(DSL.name(alias), PG_FOREIGN_TABLE);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_foreign_table</code> table
     * reference
     */
    public PgForeignTable(Name alias) {
        this(alias, PG_FOREIGN_TABLE);
    }

    /**
     * Create a <code>pg_catalog.pg_foreign_table</code> table reference
     */
    public PgForeignTable() {
        this(DSL.name("pg_foreign_table"), null);
    }

    public <O extends Record> PgForeignTable(Table<O> child, ForeignKey<O, PgForeignTableRecord> key) {
        super(child, key, PG_FOREIGN_TABLE);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public UniqueKey<PgForeignTableRecord> getPrimaryKey() {
        return Keys.PG_FOREIGN_TABLE_RELID_INDEX;
    }

    @Override
    @NotNull
    public PgForeignTable as(String alias) {
        return new PgForeignTable(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgForeignTable as(Name alias) {
        return new PgForeignTable(alias, this);
    }

    @Override
    @NotNull
    public PgForeignTable as(Table<?> alias) {
        return new PgForeignTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgForeignTable rename(String name) {
        return new PgForeignTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgForeignTable rename(Name name) {
        return new PgForeignTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgForeignTable rename(Table<?> name) {
        return new PgForeignTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<Long, Long, String[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super String[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super String[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
