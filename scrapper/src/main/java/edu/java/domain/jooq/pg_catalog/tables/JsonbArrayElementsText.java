/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.JsonbArrayElementsTextRecord;

import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Function1;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JsonbArrayElementsText extends TableImpl<JsonbArrayElementsTextRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>pg_catalog.jsonb_array_elements_text</code>
     */
    public static final JsonbArrayElementsText JSONB_ARRAY_ELEMENTS_TEXT = new JsonbArrayElementsText();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<JsonbArrayElementsTextRecord> getRecordType() {
        return JsonbArrayElementsTextRecord.class;
    }

    /**
     * The column <code>pg_catalog.jsonb_array_elements_text.value</code>.
     */
    public final TableField<JsonbArrayElementsTextRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    private JsonbArrayElementsText(Name alias, Table<JsonbArrayElementsTextRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.JSONB)
        });
    }

    private JsonbArrayElementsText(Name alias, Table<JsonbArrayElementsTextRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>pg_catalog.jsonb_array_elements_text</code> table
     * reference
     */
    public JsonbArrayElementsText(String alias) {
        this(DSL.name(alias), JSONB_ARRAY_ELEMENTS_TEXT);
    }

    /**
     * Create an aliased <code>pg_catalog.jsonb_array_elements_text</code> table
     * reference
     */
    public JsonbArrayElementsText(Name alias) {
        this(alias, JSONB_ARRAY_ELEMENTS_TEXT);
    }

    /**
     * Create a <code>pg_catalog.jsonb_array_elements_text</code> table
     * reference
     */
    public JsonbArrayElementsText() {
        this(DSL.name("jsonb_array_elements_text"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public JsonbArrayElementsText as(String alias) {
        return new JsonbArrayElementsText(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public JsonbArrayElementsText as(Name alias) {
        return new JsonbArrayElementsText(alias, this, parameters);
    }

    @Override
    @NotNull
    public JsonbArrayElementsText as(Table<?> alias) {
        return new JsonbArrayElementsText(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public JsonbArrayElementsText rename(String name) {
        return new JsonbArrayElementsText(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public JsonbArrayElementsText rename(Name name) {
        return new JsonbArrayElementsText(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public JsonbArrayElementsText rename(Table<?> name) {
        return new JsonbArrayElementsText(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public JsonbArrayElementsText call(
          JSONB fromJson
    ) {
        JsonbArrayElementsText result = new JsonbArrayElementsText(DSL.name("jsonb_array_elements_text"), null, new Field[] {
            DSL.val(fromJson, SQLDataType.JSONB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public JsonbArrayElementsText call(
          Field<JSONB> fromJson
    ) {
        JsonbArrayElementsText result = new JsonbArrayElementsText(DSL.name("jsonb_array_elements_text"), null, new Field[] {
            fromJson
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function1<? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function1<? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
