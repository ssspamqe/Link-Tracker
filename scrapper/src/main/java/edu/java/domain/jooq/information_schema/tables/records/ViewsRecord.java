/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.information_schema.tables.records;


import edu.java.domain.jooq.information_schema.tables.Views;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ViewsRecord extends TableRecordImpl<ViewsRecord> implements Record10<String, String, String, String, String, String, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>information_schema.views.table_catalog</code>.
     */
    public void setTableCatalog(@Nullable String value) {
        set(0, value);
    }

    /**
     * Getter for <code>information_schema.views.table_catalog</code>.
     */
    @Nullable
    public String getTableCatalog() {
        return (String) get(0);
    }

    /**
     * Setter for <code>information_schema.views.table_schema</code>.
     */
    public void setTableSchema(@Nullable String value) {
        set(1, value);
    }

    /**
     * Getter for <code>information_schema.views.table_schema</code>.
     */
    @Nullable
    public String getTableSchema() {
        return (String) get(1);
    }

    /**
     * Setter for <code>information_schema.views.table_name</code>.
     */
    public void setTableName(@Nullable String value) {
        set(2, value);
    }

    /**
     * Getter for <code>information_schema.views.table_name</code>.
     */
    @Nullable
    public String getTableName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>information_schema.views.view_definition</code>.
     */
    public void setViewDefinition(@Nullable String value) {
        set(3, value);
    }

    /**
     * Getter for <code>information_schema.views.view_definition</code>.
     */
    @Nullable
    public String getViewDefinition() {
        return (String) get(3);
    }

    /**
     * Setter for <code>information_schema.views.check_option</code>.
     */
    public void setCheckOption(@Nullable String value) {
        set(4, value);
    }

    /**
     * Getter for <code>information_schema.views.check_option</code>.
     */
    @Nullable
    public String getCheckOption() {
        return (String) get(4);
    }

    /**
     * Setter for <code>information_schema.views.is_updatable</code>.
     */
    public void setIsUpdatable(@Nullable String value) {
        set(5, value);
    }

    /**
     * Getter for <code>information_schema.views.is_updatable</code>.
     */
    @Size(max = 3)
    @Nullable
    public String getIsUpdatable() {
        return (String) get(5);
    }

    /**
     * Setter for <code>information_schema.views.is_insertable_into</code>.
     */
    public void setIsInsertableInto(@Nullable String value) {
        set(6, value);
    }

    /**
     * Getter for <code>information_schema.views.is_insertable_into</code>.
     */
    @Size(max = 3)
    @Nullable
    public String getIsInsertableInto() {
        return (String) get(6);
    }

    /**
     * Setter for <code>information_schema.views.is_trigger_updatable</code>.
     */
    public void setIsTriggerUpdatable(@Nullable String value) {
        set(7, value);
    }

    /**
     * Getter for <code>information_schema.views.is_trigger_updatable</code>.
     */
    @Size(max = 3)
    @Nullable
    public String getIsTriggerUpdatable() {
        return (String) get(7);
    }

    /**
     * Setter for <code>information_schema.views.is_trigger_deletable</code>.
     */
    public void setIsTriggerDeletable(@Nullable String value) {
        set(8, value);
    }

    /**
     * Getter for <code>information_schema.views.is_trigger_deletable</code>.
     */
    @Size(max = 3)
    @Nullable
    public String getIsTriggerDeletable() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>information_schema.views.is_trigger_insertable_into</code>.
     */
    public void setIsTriggerInsertableInto(@Nullable String value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>information_schema.views.is_trigger_insertable_into</code>.
     */
    @Size(max = 3)
    @Nullable
    public String getIsTriggerInsertableInto() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row10<String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row10<String, String, String, String, String, String, String, String, String, String> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<String> field1() {
        return Views.VIEWS.TABLE_CATALOG;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return Views.VIEWS.TABLE_SCHEMA;
    }

    @Override
    @NotNull
    public Field<String> field3() {
        return Views.VIEWS.TABLE_NAME;
    }

    @Override
    @NotNull
    public Field<String> field4() {
        return Views.VIEWS.VIEW_DEFINITION;
    }

    @Override
    @NotNull
    public Field<String> field5() {
        return Views.VIEWS.CHECK_OPTION;
    }

    @Override
    @NotNull
    public Field<String> field6() {
        return Views.VIEWS.IS_UPDATABLE;
    }

    @Override
    @NotNull
    public Field<String> field7() {
        return Views.VIEWS.IS_INSERTABLE_INTO;
    }

    @Override
    @NotNull
    public Field<String> field8() {
        return Views.VIEWS.IS_TRIGGER_UPDATABLE;
    }

    @Override
    @NotNull
    public Field<String> field9() {
        return Views.VIEWS.IS_TRIGGER_DELETABLE;
    }

    @Override
    @NotNull
    public Field<String> field10() {
        return Views.VIEWS.IS_TRIGGER_INSERTABLE_INTO;
    }

    @Override
    @Nullable
    public String component1() {
        return getTableCatalog();
    }

    @Override
    @Nullable
    public String component2() {
        return getTableSchema();
    }

    @Override
    @Nullable
    public String component3() {
        return getTableName();
    }

    @Override
    @Nullable
    public String component4() {
        return getViewDefinition();
    }

    @Override
    @Nullable
    public String component5() {
        return getCheckOption();
    }

    @Override
    @Nullable
    public String component6() {
        return getIsUpdatable();
    }

    @Override
    @Nullable
    public String component7() {
        return getIsInsertableInto();
    }

    @Override
    @Nullable
    public String component8() {
        return getIsTriggerUpdatable();
    }

    @Override
    @Nullable
    public String component9() {
        return getIsTriggerDeletable();
    }

    @Override
    @Nullable
    public String component10() {
        return getIsTriggerInsertableInto();
    }

    @Override
    @Nullable
    public String value1() {
        return getTableCatalog();
    }

    @Override
    @Nullable
    public String value2() {
        return getTableSchema();
    }

    @Override
    @Nullable
    public String value3() {
        return getTableName();
    }

    @Override
    @Nullable
    public String value4() {
        return getViewDefinition();
    }

    @Override
    @Nullable
    public String value5() {
        return getCheckOption();
    }

    @Override
    @Nullable
    public String value6() {
        return getIsUpdatable();
    }

    @Override
    @Nullable
    public String value7() {
        return getIsInsertableInto();
    }

    @Override
    @Nullable
    public String value8() {
        return getIsTriggerUpdatable();
    }

    @Override
    @Nullable
    public String value9() {
        return getIsTriggerDeletable();
    }

    @Override
    @Nullable
    public String value10() {
        return getIsTriggerInsertableInto();
    }

    @Override
    @NotNull
    public ViewsRecord value1(@Nullable String value) {
        setTableCatalog(value);
        return this;
    }

    @Override
    @NotNull
    public ViewsRecord value2(@Nullable String value) {
        setTableSchema(value);
        return this;
    }

    @Override
    @NotNull
    public ViewsRecord value3(@Nullable String value) {
        setTableName(value);
        return this;
    }

    @Override
    @NotNull
    public ViewsRecord value4(@Nullable String value) {
        setViewDefinition(value);
        return this;
    }

    @Override
    @NotNull
    public ViewsRecord value5(@Nullable String value) {
        setCheckOption(value);
        return this;
    }

    @Override
    @NotNull
    public ViewsRecord value6(@Nullable String value) {
        setIsUpdatable(value);
        return this;
    }

    @Override
    @NotNull
    public ViewsRecord value7(@Nullable String value) {
        setIsInsertableInto(value);
        return this;
    }

    @Override
    @NotNull
    public ViewsRecord value8(@Nullable String value) {
        setIsTriggerUpdatable(value);
        return this;
    }

    @Override
    @NotNull
    public ViewsRecord value9(@Nullable String value) {
        setIsTriggerDeletable(value);
        return this;
    }

    @Override
    @NotNull
    public ViewsRecord value10(@Nullable String value) {
        setIsTriggerInsertableInto(value);
        return this;
    }

    @Override
    @NotNull
    public ViewsRecord values(@Nullable String value1, @Nullable String value2, @Nullable String value3, @Nullable String value4, @Nullable String value5, @Nullable String value6, @Nullable String value7, @Nullable String value8, @Nullable String value9, @Nullable String value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ViewsRecord
     */
    public ViewsRecord() {
        super(Views.VIEWS);
    }

    /**
     * Create a detached, initialised ViewsRecord
     */
    @ConstructorProperties({ "tableCatalog", "tableSchema", "tableName", "viewDefinition", "checkOption", "isUpdatable", "isInsertableInto", "isTriggerUpdatable", "isTriggerDeletable", "isTriggerInsertableInto" })
    public ViewsRecord(@Nullable String tableCatalog, @Nullable String tableSchema, @Nullable String tableName, @Nullable String viewDefinition, @Nullable String checkOption, @Nullable String isUpdatable, @Nullable String isInsertableInto, @Nullable String isTriggerUpdatable, @Nullable String isTriggerDeletable, @Nullable String isTriggerInsertableInto) {
        super(Views.VIEWS);

        setTableCatalog(tableCatalog);
        setTableSchema(tableSchema);
        setTableName(tableName);
        setViewDefinition(viewDefinition);
        setCheckOption(checkOption);
        setIsUpdatable(isUpdatable);
        setIsInsertableInto(isInsertableInto);
        setIsTriggerUpdatable(isTriggerUpdatable);
        setIsTriggerDeletable(isTriggerDeletable);
        setIsTriggerInsertableInto(isTriggerInsertableInto);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ViewsRecord
     */
    public ViewsRecord(edu.java.domain.jooq.information_schema.tables.pojos.Views value) {
        super(Views.VIEWS);

        if (value != null) {
            setTableCatalog(value.getTableCatalog());
            setTableSchema(value.getTableSchema());
            setTableName(value.getTableName());
            setViewDefinition(value.getViewDefinition());
            setCheckOption(value.getCheckOption());
            setIsUpdatable(value.getIsUpdatable());
            setIsInsertableInto(value.getIsInsertableInto());
            setIsTriggerUpdatable(value.getIsTriggerUpdatable());
            setIsTriggerDeletable(value.getIsTriggerDeletable());
            setIsTriggerInsertableInto(value.getIsTriggerInsertableInto());
            resetChangedOnNotNull();
        }
    }
}
