/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.public_.tables.records;


import edu.java.domain.jooq.public_.tables.StackOverflowQuestions;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StackOverflowQuestionsRecord extends UpdatableRecordImpl<StackOverflowQuestionsRecord> implements Record4<Long, Long, String, Long[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.stack_overflow_questions.id</code>.
     */
    public void setId(@NotNull Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.stack_overflow_questions.id</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.stack_overflow_questions.link_id</code>.
     */
    public void setLinkId(@NotNull Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.stack_overflow_questions.link_id</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getLinkId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>public.stack_overflow_questions.description_md5_hash</code>.
     */
    public void setDescriptionMd5Hash(@NotNull String value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>public.stack_overflow_questions.description_md5_hash</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public String getDescriptionMd5Hash() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.stack_overflow_questions.answers_ids</code>.
     */
    public void setAnswersIds(@NotNull Long[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.stack_overflow_questions.answers_ids</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long[] getAnswersIds() {
        return (Long[]) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row4<Long, Long, String, Long[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row4<Long, Long, String, Long[]> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS.ID;
    }

    @Override
    @NotNull
    public Field<Long> field2() {
        return StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS.LINK_ID;
    }

    @Override
    @NotNull
    public Field<String> field3() {
        return StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS.DESCRIPTION_MD5_HASH;
    }

    @Override
    @NotNull
    public Field<Long[]> field4() {
        return StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS.ANSWERS_IDS;
    }

    @Override
    @NotNull
    public Long component1() {
        return getId();
    }

    @Override
    @NotNull
    public Long component2() {
        return getLinkId();
    }

    @Override
    @NotNull
    public String component3() {
        return getDescriptionMd5Hash();
    }

    @Override
    @NotNull
    public Long[] component4() {
        return getAnswersIds();
    }

    @Override
    @NotNull
    public Long value1() {
        return getId();
    }

    @Override
    @NotNull
    public Long value2() {
        return getLinkId();
    }

    @Override
    @NotNull
    public String value3() {
        return getDescriptionMd5Hash();
    }

    @Override
    @NotNull
    public Long[] value4() {
        return getAnswersIds();
    }

    @Override
    @NotNull
    public StackOverflowQuestionsRecord value1(@NotNull Long value) {
        setId(value);
        return this;
    }

    @Override
    @NotNull
    public StackOverflowQuestionsRecord value2(@NotNull Long value) {
        setLinkId(value);
        return this;
    }

    @Override
    @NotNull
    public StackOverflowQuestionsRecord value3(@NotNull String value) {
        setDescriptionMd5Hash(value);
        return this;
    }

    @Override
    @NotNull
    public StackOverflowQuestionsRecord value4(@NotNull Long[] value) {
        setAnswersIds(value);
        return this;
    }

    @Override
    @NotNull
    public StackOverflowQuestionsRecord values(@NotNull Long value1, @NotNull Long value2, @NotNull String value3, @NotNull Long[] value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StackOverflowQuestionsRecord
     */
    public StackOverflowQuestionsRecord() {
        super(StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS);
    }

    /**
     * Create a detached, initialised StackOverflowQuestionsRecord
     */
    @ConstructorProperties({ "id", "linkId", "descriptionMd5Hash", "answersIds" })
    public StackOverflowQuestionsRecord(@NotNull Long id, @NotNull Long linkId, @NotNull String descriptionMd5Hash, @NotNull Long[] answersIds) {
        super(StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS);

        setId(id);
        setLinkId(linkId);
        setDescriptionMd5Hash(descriptionMd5Hash);
        setAnswersIds(answersIds);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StackOverflowQuestionsRecord
     */
    public StackOverflowQuestionsRecord(edu.java.domain.jooq.public_.tables.pojos.StackOverflowQuestions value) {
        super(StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS);

        if (value != null) {
            setId(value.getId());
            setLinkId(value.getLinkId());
            setDescriptionMd5Hash(value.getDescriptionMd5Hash());
            setAnswersIds(value.getAnswersIds());
            resetChangedOnNotNull();
        }
    }
}
