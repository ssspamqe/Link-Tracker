/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.information_schema.tables.records;


import edu.java.domain.jooq.information_schema.tables.UserMappings;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * The table <code>information_schema.user_mappings</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserMappingsRecord extends TableRecordImpl<UserMappingsRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>information_schema.user_mappings.authorization_identifier</code>.
     */
    public void setAuthorizationIdentifier(@Nullable String value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>information_schema.user_mappings.authorization_identifier</code>.
     */
    @Nullable
    public String getAuthorizationIdentifier() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>information_schema.user_mappings.foreign_server_catalog</code>.
     */
    public void setForeignServerCatalog(@Nullable String value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>information_schema.user_mappings.foreign_server_catalog</code>.
     */
    @Nullable
    public String getForeignServerCatalog() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>information_schema.user_mappings.foreign_server_name</code>.
     */
    public void setForeignServerName(@Nullable String value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>information_schema.user_mappings.foreign_server_name</code>.
     */
    @Nullable
    public String getForeignServerName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<String> field1() {
        return UserMappings.USER_MAPPINGS.AUTHORIZATION_IDENTIFIER;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return UserMappings.USER_MAPPINGS.FOREIGN_SERVER_CATALOG;
    }

    @Override
    @NotNull
    public Field<String> field3() {
        return UserMappings.USER_MAPPINGS.FOREIGN_SERVER_NAME;
    }

    @Override
    @Nullable
    public String component1() {
        return getAuthorizationIdentifier();
    }

    @Override
    @Nullable
    public String component2() {
        return getForeignServerCatalog();
    }

    @Override
    @Nullable
    public String component3() {
        return getForeignServerName();
    }

    @Override
    @Nullable
    public String value1() {
        return getAuthorizationIdentifier();
    }

    @Override
    @Nullable
    public String value2() {
        return getForeignServerCatalog();
    }

    @Override
    @Nullable
    public String value3() {
        return getForeignServerName();
    }

    @Override
    @NotNull
    public UserMappingsRecord value1(@Nullable String value) {
        setAuthorizationIdentifier(value);
        return this;
    }

    @Override
    @NotNull
    public UserMappingsRecord value2(@Nullable String value) {
        setForeignServerCatalog(value);
        return this;
    }

    @Override
    @NotNull
    public UserMappingsRecord value3(@Nullable String value) {
        setForeignServerName(value);
        return this;
    }

    @Override
    @NotNull
    public UserMappingsRecord values(@Nullable String value1, @Nullable String value2, @Nullable String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserMappingsRecord
     */
    public UserMappingsRecord() {
        super(UserMappings.USER_MAPPINGS);
    }

    /**
     * Create a detached, initialised UserMappingsRecord
     */
    @ConstructorProperties({ "authorizationIdentifier", "foreignServerCatalog", "foreignServerName" })
    public UserMappingsRecord(@Nullable String authorizationIdentifier, @Nullable String foreignServerCatalog, @Nullable String foreignServerName) {
        super(UserMappings.USER_MAPPINGS);

        setAuthorizationIdentifier(authorizationIdentifier);
        setForeignServerCatalog(foreignServerCatalog);
        setForeignServerName(foreignServerName);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserMappingsRecord
     */
    public UserMappingsRecord(edu.java.domain.jooq.information_schema.tables.pojos.UserMappings value) {
        super(UserMappings.USER_MAPPINGS);

        if (value != null) {
            setAuthorizationIdentifier(value.getAuthorizationIdentifier());
            setForeignServerCatalog(value.getForeignServerCatalog());
            setForeignServerName(value.getForeignServerName());
            resetChangedOnNotNull();
        }
    }
}
