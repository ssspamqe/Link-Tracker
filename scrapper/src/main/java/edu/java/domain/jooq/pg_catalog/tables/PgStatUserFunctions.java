/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgStatUserFunctionsRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatUserFunctions extends TableImpl<PgStatUserFunctionsRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgStatUserFunctions PG_STAT_USER_FUNCTIONS = new PgStatUserFunctions();

    @Override
    @NotNull
    public Class<PgStatUserFunctionsRecord> getRecordType() {
        return PgStatUserFunctionsRecord.class;
    }

    public final TableField<PgStatUserFunctionsRecord, Long> FUNCID = createField(DSL.name("funcid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatUserFunctionsRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgStatUserFunctionsRecord, String> FUNCNAME = createField(DSL.name("funcname"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgStatUserFunctionsRecord, Long> CALLS = createField(DSL.name("calls"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatUserFunctionsRecord, Double> TOTAL_TIME = createField(DSL.name("total_time"), SQLDataType.DOUBLE, this, "");

    public final TableField<PgStatUserFunctionsRecord, Double> SELF_TIME = createField(DSL.name("self_time"), SQLDataType.DOUBLE, this, "");

    private PgStatUserFunctions(Name alias, Table<PgStatUserFunctionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatUserFunctions(Name alias, Table<PgStatUserFunctionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public PgStatUserFunctions(String alias) {
        this(DSL.name(alias), PG_STAT_USER_FUNCTIONS);
    }

    public PgStatUserFunctions(Name alias) {
        this(alias, PG_STAT_USER_FUNCTIONS);
    }

    public PgStatUserFunctions() {
        this(DSL.name("pg_stat_user_functions"), null);
    }

    public <O extends Record> PgStatUserFunctions(Table<O> child, ForeignKey<O, PgStatUserFunctionsRecord> key) {
        super(child, key, PG_STAT_USER_FUNCTIONS);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgStatUserFunctions as(String alias) {
        return new PgStatUserFunctions(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgStatUserFunctions as(Name alias) {
        return new PgStatUserFunctions(alias, this);
    }

    @Override
    @NotNull
    public PgStatUserFunctions as(Table<?> alias) {
        return new PgStatUserFunctions(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgStatUserFunctions rename(String name) {
        return new PgStatUserFunctions(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgStatUserFunctions rename(Name name) {
        return new PgStatUserFunctions(name, null);
    }

    @Override
    @NotNull
    public PgStatUserFunctions rename(Table<?> name) {
        return new PgStatUserFunctions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row6<Long, String, String, Long, Double, Double> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super String, ? super Long, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super String, ? super Long, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
