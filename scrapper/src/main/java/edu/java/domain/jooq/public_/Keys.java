/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.public_;


import edu.java.domain.jooq.public_.tables.ChatLinks;
import edu.java.domain.jooq.public_.tables.Chats;
import edu.java.domain.jooq.public_.tables.Databasechangeloglock;
import edu.java.domain.jooq.public_.tables.GitHubRepositories;
import edu.java.domain.jooq.public_.tables.Links;
import edu.java.domain.jooq.public_.tables.StackOverflowQuestions;
import edu.java.domain.jooq.public_.tables.records.ChatLinksRecord;
import edu.java.domain.jooq.public_.tables.records.ChatsRecord;
import edu.java.domain.jooq.public_.tables.records.DatabasechangeloglockRecord;
import edu.java.domain.jooq.public_.tables.records.GitHubRepositoriesRecord;
import edu.java.domain.jooq.public_.tables.records.LinksRecord;
import edu.java.domain.jooq.public_.tables.records.StackOverflowQuestionsRecord;

import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ChatLinksRecord> CHAT_LINKS_CHAT_ID_LINK_ID_KEY = Internal.createUniqueKey(ChatLinks.CHAT_LINKS, DSL.name("chat_links_chat_id_link_id_key"), new TableField[] { ChatLinks.CHAT_LINKS.CHAT_ID, ChatLinks.CHAT_LINKS.LINK_ID }, true);
    public static final UniqueKey<ChatLinksRecord> CHAT_LINKS_PKEY = Internal.createUniqueKey(ChatLinks.CHAT_LINKS, DSL.name("chat_links_pkey"), new TableField[] { ChatLinks.CHAT_LINKS.ID }, true);
    public static final UniqueKey<ChatsRecord> CHATS_PKEY = Internal.createUniqueKey(Chats.CHATS, DSL.name("chats_pkey"), new TableField[] { Chats.CHATS.ID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<GitHubRepositoriesRecord> GIT_HUB_REPOSITORIES_NAME_OWNER_KEY = Internal.createUniqueKey(GitHubRepositories.GIT_HUB_REPOSITORIES, DSL.name("git_hub_repositories_name_owner_key"), new TableField[] { GitHubRepositories.GIT_HUB_REPOSITORIES.NAME, GitHubRepositories.GIT_HUB_REPOSITORIES.OWNER }, true);
    public static final UniqueKey<GitHubRepositoriesRecord> GIT_HUB_REPOSITORIES_PKEY = Internal.createUniqueKey(GitHubRepositories.GIT_HUB_REPOSITORIES, DSL.name("git_hub_repositories_pkey"), new TableField[] { GitHubRepositories.GIT_HUB_REPOSITORIES.ID }, true);
    public static final UniqueKey<LinksRecord> LINKS_PKEY = Internal.createUniqueKey(Links.LINKS, DSL.name("links_pkey"), new TableField[] { Links.LINKS.ID }, true);
    public static final UniqueKey<LinksRecord> LINKS_URL_KEY = Internal.createUniqueKey(Links.LINKS, DSL.name("links_url_key"), new TableField[] { Links.LINKS.URL }, true);
    public static final UniqueKey<StackOverflowQuestionsRecord> STACK_OVERFLOW_QUESTIONS_LINK_ID_KEY = Internal.createUniqueKey(StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS, DSL.name("stack_overflow_questions_link_id_key"), new TableField[] { StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS.LINK_ID }, true);
    public static final UniqueKey<StackOverflowQuestionsRecord> STACK_OVERFLOW_QUESTIONS_PKEY = Internal.createUniqueKey(StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS, DSL.name("stack_overflow_questions_pkey"), new TableField[] { StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ChatLinksRecord, ChatsRecord> CHAT_LINKS__CHAT_LINKS_CHAT_ID_FKEY = Internal.createForeignKey(ChatLinks.CHAT_LINKS, DSL.name("chat_links_chat_id_fkey"), new TableField[] { ChatLinks.CHAT_LINKS.CHAT_ID }, Keys.CHATS_PKEY, new TableField[] { Chats.CHATS.ID }, true);
    public static final ForeignKey<ChatLinksRecord, LinksRecord> CHAT_LINKS__CHAT_LINKS_LINK_ID_FKEY = Internal.createForeignKey(ChatLinks.CHAT_LINKS, DSL.name("chat_links_link_id_fkey"), new TableField[] { ChatLinks.CHAT_LINKS.LINK_ID }, Keys.LINKS_PKEY, new TableField[] { Links.LINKS.ID }, true);
    public static final ForeignKey<GitHubRepositoriesRecord, LinksRecord> GIT_HUB_REPOSITORIES__GIT_HUB_REPOSITORIES_LINK_ID_FKEY = Internal.createForeignKey(GitHubRepositories.GIT_HUB_REPOSITORIES, DSL.name("git_hub_repositories_link_id_fkey"), new TableField[] { GitHubRepositories.GIT_HUB_REPOSITORIES.LINK_ID }, Keys.LINKS_PKEY, new TableField[] { Links.LINKS.ID }, true);
    public static final ForeignKey<StackOverflowQuestionsRecord, LinksRecord> STACK_OVERFLOW_QUESTIONS__STACK_OVERFLOW_QUESTIONS_LINK_ID_FKEY = Internal.createForeignKey(StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS, DSL.name("stack_overflow_questions_link_id_fkey"), new TableField[] { StackOverflowQuestions.STACK_OVERFLOW_QUESTIONS.LINK_ID }, Keys.LINKS_PKEY, new TableField[] { Links.LINKS.ID }, true);
}
