/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgCursorsRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgCursors extends TableImpl<PgCursorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_cursors</code>
     */
    public static final PgCursors PG_CURSORS = new PgCursors();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PgCursorsRecord> getRecordType() {
        return PgCursorsRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_cursors.name</code>.
     */
    public final TableField<PgCursorsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_cursors.statement</code>.
     */
    public final TableField<PgCursorsRecord, String> STATEMENT = createField(DSL.name("statement"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_cursors.is_holdable</code>.
     */
    public final TableField<PgCursorsRecord, Boolean> IS_HOLDABLE = createField(DSL.name("is_holdable"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>pg_catalog.pg_cursors.is_binary</code>.
     */
    public final TableField<PgCursorsRecord, Boolean> IS_BINARY = createField(DSL.name("is_binary"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>pg_catalog.pg_cursors.is_scrollable</code>.
     */
    public final TableField<PgCursorsRecord, Boolean> IS_SCROLLABLE = createField(DSL.name("is_scrollable"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>pg_catalog.pg_cursors.creation_time</code>.
     */
    public final TableField<PgCursorsRecord, OffsetDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgCursors(Name alias, Table<PgCursorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgCursors(Name alias, Table<PgCursorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_cursors" as  SELECT name,
         statement,
         is_holdable,
         is_binary,
         is_scrollable,
         creation_time
        FROM pg_cursor() c(name, statement, is_holdable, is_binary, is_scrollable, creation_time);
        """));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_cursors</code> table reference
     */
    public PgCursors(String alias) {
        this(DSL.name(alias), PG_CURSORS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_cursors</code> table reference
     */
    public PgCursors(Name alias) {
        this(alias, PG_CURSORS);
    }

    /**
     * Create a <code>pg_catalog.pg_cursors</code> table reference
     */
    public PgCursors() {
        this(DSL.name("pg_cursors"), null);
    }

    public <O extends Record> PgCursors(Table<O> child, ForeignKey<O, PgCursorsRecord> key) {
        super(child, key, PG_CURSORS);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgCursors as(String alias) {
        return new PgCursors(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgCursors as(Name alias) {
        return new PgCursors(alias, this);
    }

    @Override
    @NotNull
    public PgCursors as(Table<?> alias) {
        return new PgCursors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgCursors rename(String name) {
        return new PgCursors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgCursors rename(Name name) {
        return new PgCursors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgCursors rename(Table<?> name) {
        return new PgCursors(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row6<String, String, Boolean, Boolean, Boolean, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
