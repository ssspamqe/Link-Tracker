/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.information_schema.tables.pojos;


import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.util.Arrays;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.Nullable;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class _PgForeignTables implements Serializable {

    private static final long serialVersionUID = 1L;

    private String foreignTableCatalog;
    private String foreignTableSchema;
    private String foreignTableName;
    private String[] ftoptions;
    private String foreignServerCatalog;
    private String foreignServerName;
    private String authorizationIdentifier;

    public _PgForeignTables() {}

    public _PgForeignTables(_PgForeignTables value) {
        this.foreignTableCatalog = value.foreignTableCatalog;
        this.foreignTableSchema = value.foreignTableSchema;
        this.foreignTableName = value.foreignTableName;
        this.ftoptions = value.ftoptions;
        this.foreignServerCatalog = value.foreignServerCatalog;
        this.foreignServerName = value.foreignServerName;
        this.authorizationIdentifier = value.authorizationIdentifier;
    }

    @ConstructorProperties({ "foreignTableCatalog", "foreignTableSchema", "foreignTableName", "ftoptions", "foreignServerCatalog", "foreignServerName", "authorizationIdentifier" })
    public _PgForeignTables(
        @Nullable String foreignTableCatalog,
        @Nullable String foreignTableSchema,
        @Nullable String foreignTableName,
        @Nullable String[] ftoptions,
        @Nullable String foreignServerCatalog,
        @Nullable String foreignServerName,
        @Nullable String authorizationIdentifier
    ) {
        this.foreignTableCatalog = foreignTableCatalog;
        this.foreignTableSchema = foreignTableSchema;
        this.foreignTableName = foreignTableName;
        this.ftoptions = ftoptions;
        this.foreignServerCatalog = foreignServerCatalog;
        this.foreignServerName = foreignServerName;
        this.authorizationIdentifier = authorizationIdentifier;
    }

    /**
     * Getter for
     * <code>information_schema._pg_foreign_tables.foreign_table_catalog</code>.
     */
    @Nullable
    public String getForeignTableCatalog() {
        return this.foreignTableCatalog;
    }

    /**
     * Setter for
     * <code>information_schema._pg_foreign_tables.foreign_table_catalog</code>.
     */
    public void setForeignTableCatalog(@Nullable String foreignTableCatalog) {
        this.foreignTableCatalog = foreignTableCatalog;
    }

    /**
     * Getter for
     * <code>information_schema._pg_foreign_tables.foreign_table_schema</code>.
     */
    @Nullable
    public String getForeignTableSchema() {
        return this.foreignTableSchema;
    }

    /**
     * Setter for
     * <code>information_schema._pg_foreign_tables.foreign_table_schema</code>.
     */
    public void setForeignTableSchema(@Nullable String foreignTableSchema) {
        this.foreignTableSchema = foreignTableSchema;
    }

    /**
     * Getter for
     * <code>information_schema._pg_foreign_tables.foreign_table_name</code>.
     */
    @Nullable
    public String getForeignTableName() {
        return this.foreignTableName;
    }

    /**
     * Setter for
     * <code>information_schema._pg_foreign_tables.foreign_table_name</code>.
     */
    public void setForeignTableName(@Nullable String foreignTableName) {
        this.foreignTableName = foreignTableName;
    }

    /**
     * Getter for <code>information_schema._pg_foreign_tables.ftoptions</code>.
     */
    @Nullable
    public String[] getFtoptions() {
        return this.ftoptions;
    }

    /**
     * Setter for <code>information_schema._pg_foreign_tables.ftoptions</code>.
     */
    public void setFtoptions(@Nullable String[] ftoptions) {
        this.ftoptions = ftoptions;
    }

    /**
     * Getter for
     * <code>information_schema._pg_foreign_tables.foreign_server_catalog</code>.
     */
    @Nullable
    public String getForeignServerCatalog() {
        return this.foreignServerCatalog;
    }

    /**
     * Setter for
     * <code>information_schema._pg_foreign_tables.foreign_server_catalog</code>.
     */
    public void setForeignServerCatalog(@Nullable String foreignServerCatalog) {
        this.foreignServerCatalog = foreignServerCatalog;
    }

    /**
     * Getter for
     * <code>information_schema._pg_foreign_tables.foreign_server_name</code>.
     */
    @Nullable
    public String getForeignServerName() {
        return this.foreignServerName;
    }

    /**
     * Setter for
     * <code>information_schema._pg_foreign_tables.foreign_server_name</code>.
     */
    public void setForeignServerName(@Nullable String foreignServerName) {
        this.foreignServerName = foreignServerName;
    }

    /**
     * Getter for
     * <code>information_schema._pg_foreign_tables.authorization_identifier</code>.
     */
    @Nullable
    public String getAuthorizationIdentifier() {
        return this.authorizationIdentifier;
    }

    /**
     * Setter for
     * <code>information_schema._pg_foreign_tables.authorization_identifier</code>.
     */
    public void setAuthorizationIdentifier(@Nullable String authorizationIdentifier) {
        this.authorizationIdentifier = authorizationIdentifier;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final _PgForeignTables other = (_PgForeignTables) obj;
        if (this.foreignTableCatalog == null) {
            if (other.foreignTableCatalog != null)
                return false;
        }
        else if (!this.foreignTableCatalog.equals(other.foreignTableCatalog))
            return false;
        if (this.foreignTableSchema == null) {
            if (other.foreignTableSchema != null)
                return false;
        }
        else if (!this.foreignTableSchema.equals(other.foreignTableSchema))
            return false;
        if (this.foreignTableName == null) {
            if (other.foreignTableName != null)
                return false;
        }
        else if (!this.foreignTableName.equals(other.foreignTableName))
            return false;
        if (this.ftoptions == null) {
            if (other.ftoptions != null)
                return false;
        }
        else if (!Arrays.deepEquals(this.ftoptions, other.ftoptions))
            return false;
        if (this.foreignServerCatalog == null) {
            if (other.foreignServerCatalog != null)
                return false;
        }
        else if (!this.foreignServerCatalog.equals(other.foreignServerCatalog))
            return false;
        if (this.foreignServerName == null) {
            if (other.foreignServerName != null)
                return false;
        }
        else if (!this.foreignServerName.equals(other.foreignServerName))
            return false;
        if (this.authorizationIdentifier == null) {
            if (other.authorizationIdentifier != null)
                return false;
        }
        else if (!this.authorizationIdentifier.equals(other.authorizationIdentifier))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.foreignTableCatalog == null) ? 0 : this.foreignTableCatalog.hashCode());
        result = prime * result + ((this.foreignTableSchema == null) ? 0 : this.foreignTableSchema.hashCode());
        result = prime * result + ((this.foreignTableName == null) ? 0 : this.foreignTableName.hashCode());
        result = prime * result + ((this.ftoptions == null) ? 0 : Arrays.deepHashCode(this.ftoptions));
        result = prime * result + ((this.foreignServerCatalog == null) ? 0 : this.foreignServerCatalog.hashCode());
        result = prime * result + ((this.foreignServerName == null) ? 0 : this.foreignServerName.hashCode());
        result = prime * result + ((this.authorizationIdentifier == null) ? 0 : this.authorizationIdentifier.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("_PgForeignTables (");

        sb.append(foreignTableCatalog);
        sb.append(", ").append(foreignTableSchema);
        sb.append(", ").append(foreignTableName);
        sb.append(", ").append(Arrays.deepToString(ftoptions));
        sb.append(", ").append(foreignServerCatalog);
        sb.append(", ").append(foreignServerName);
        sb.append(", ").append(authorizationIdentifier);

        sb.append(")");
        return sb.toString();
    }
}
