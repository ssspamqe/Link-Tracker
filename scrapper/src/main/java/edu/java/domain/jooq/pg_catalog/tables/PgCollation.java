/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.Keys;
import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgCollationRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgCollation extends TableImpl<PgCollationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_collation</code>
     */
    public static final PgCollation PG_COLLATION = new PgCollation();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PgCollationRecord> getRecordType() {
        return PgCollationRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_collation.oid</code>.
     */
    public final TableField<PgCollationRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_collation.collname</code>.
     */
    public final TableField<PgCollationRecord, String> COLLNAME = createField(DSL.name("collname"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_collation.collnamespace</code>.
     */
    public final TableField<PgCollationRecord, Long> COLLNAMESPACE = createField(DSL.name("collnamespace"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_collation.collowner</code>.
     */
    public final TableField<PgCollationRecord, Long> COLLOWNER = createField(DSL.name("collowner"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_collation.collprovider</code>.
     */
    public final TableField<PgCollationRecord, String> COLLPROVIDER = createField(DSL.name("collprovider"), SQLDataType.CHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_collation.collisdeterministic</code>.
     */
    public final TableField<PgCollationRecord, Boolean> COLLISDETERMINISTIC = createField(DSL.name("collisdeterministic"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_collation.collencoding</code>.
     */
    public final TableField<PgCollationRecord, Integer> COLLENCODING = createField(DSL.name("collencoding"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_collation.collcollate</code>.
     */
    public final TableField<PgCollationRecord, String> COLLCOLLATE = createField(DSL.name("collcollate"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_collation.collctype</code>.
     */
    public final TableField<PgCollationRecord, String> COLLCTYPE = createField(DSL.name("collctype"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_collation.colliculocale</code>.
     */
    public final TableField<PgCollationRecord, String> COLLICULOCALE = createField(DSL.name("colliculocale"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_collation.collicurules</code>.
     */
    public final TableField<PgCollationRecord, String> COLLICURULES = createField(DSL.name("collicurules"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_collation.collversion</code>.
     */
    public final TableField<PgCollationRecord, String> COLLVERSION = createField(DSL.name("collversion"), SQLDataType.CLOB, this, "");

    private PgCollation(Name alias, Table<PgCollationRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgCollation(Name alias, Table<PgCollationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_collation</code> table reference
     */
    public PgCollation(String alias) {
        this(DSL.name(alias), PG_COLLATION);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_collation</code> table reference
     */
    public PgCollation(Name alias) {
        this(alias, PG_COLLATION);
    }

    /**
     * Create a <code>pg_catalog.pg_collation</code> table reference
     */
    public PgCollation() {
        this(DSL.name("pg_collation"), null);
    }

    public <O extends Record> PgCollation(Table<O> child, ForeignKey<O, PgCollationRecord> key) {
        super(child, key, PG_COLLATION);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public UniqueKey<PgCollationRecord> getPrimaryKey() {
        return Keys.PG_COLLATION_OID_INDEX;
    }

    @Override
    @NotNull
    public List<UniqueKey<PgCollationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_COLLATION_NAME_ENC_NSP_INDEX);
    }

    @Override
    @NotNull
    public PgCollation as(String alias) {
        return new PgCollation(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgCollation as(Name alias) {
        return new PgCollation(alias, this);
    }

    @Override
    @NotNull
    public PgCollation as(Table<?> alias) {
        return new PgCollation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgCollation rename(String name) {
        return new PgCollation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgCollation rename(Name name) {
        return new PgCollation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgCollation rename(Table<?> name) {
        return new PgCollation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row12<Long, String, Long, Long, String, Boolean, Integer, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super String, ? super Long, ? super Long, ? super String, ? super Boolean, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super String, ? super Long, ? super Long, ? super String, ? super Boolean, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
