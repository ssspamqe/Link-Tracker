/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgPreparedXactsRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgPreparedXacts extends TableImpl<PgPreparedXactsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_prepared_xacts</code>
     */
    public static final PgPreparedXacts PG_PREPARED_XACTS = new PgPreparedXacts();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PgPreparedXactsRecord> getRecordType() {
        return PgPreparedXactsRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_prepared_xacts.transaction</code>.
     */
    public final TableField<PgPreparedXactsRecord, Long> TRANSACTION = createField(DSL.name("transaction"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_prepared_xacts.gid</code>.
     */
    public final TableField<PgPreparedXactsRecord, String> GID = createField(DSL.name("gid"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_prepared_xacts.prepared</code>.
     */
    public final TableField<PgPreparedXactsRecord, OffsetDateTime> PREPARED = createField(DSL.name("prepared"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>pg_catalog.pg_prepared_xacts.owner</code>.
     */
    public final TableField<PgPreparedXactsRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_prepared_xacts.database</code>.
     */
    public final TableField<PgPreparedXactsRecord, String> DATABASE = createField(DSL.name("database"), SQLDataType.VARCHAR, this, "");

    private PgPreparedXacts(Name alias, Table<PgPreparedXactsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgPreparedXacts(Name alias, Table<PgPreparedXactsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_prepared_xacts" as  SELECT p.transaction,
         p.gid,
         p.prepared,
         u.rolname AS owner,
         d.datname AS database
        FROM ((pg_prepared_xact() p(transaction, gid, prepared, ownerid, dbid)
          LEFT JOIN pg_authid u ON ((p.ownerid = u.oid)))
          LEFT JOIN pg_database d ON ((p.dbid = d.oid)));
        """));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_prepared_xacts</code> table
     * reference
     */
    public PgPreparedXacts(String alias) {
        this(DSL.name(alias), PG_PREPARED_XACTS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_prepared_xacts</code> table
     * reference
     */
    public PgPreparedXacts(Name alias) {
        this(alias, PG_PREPARED_XACTS);
    }

    /**
     * Create a <code>pg_catalog.pg_prepared_xacts</code> table reference
     */
    public PgPreparedXacts() {
        this(DSL.name("pg_prepared_xacts"), null);
    }

    public <O extends Record> PgPreparedXacts(Table<O> child, ForeignKey<O, PgPreparedXactsRecord> key) {
        super(child, key, PG_PREPARED_XACTS);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgPreparedXacts as(String alias) {
        return new PgPreparedXacts(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgPreparedXacts as(Name alias) {
        return new PgPreparedXacts(alias, this);
    }

    @Override
    @NotNull
    public PgPreparedXacts as(Table<?> alias) {
        return new PgPreparedXacts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgPreparedXacts rename(String name) {
        return new PgPreparedXacts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgPreparedXacts rename(Name name) {
        return new PgPreparedXacts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgPreparedXacts rename(Table<?> name) {
        return new PgPreparedXacts(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row5<Long, String, OffsetDateTime, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super OffsetDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super OffsetDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
