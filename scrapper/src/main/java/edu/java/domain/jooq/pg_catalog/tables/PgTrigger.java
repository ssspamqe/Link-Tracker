/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.Indexes;
import edu.java.domain.jooq.pg_catalog.Keys;
import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgTriggerRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function19;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>pg_catalog.pg_trigger</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgTrigger extends TableImpl<PgTriggerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_trigger</code>
     */
    public static final PgTrigger PG_TRIGGER = new PgTrigger();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PgTriggerRecord> getRecordType() {
        return PgTriggerRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_trigger.oid</code>.
     */
    public final TableField<PgTriggerRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgrelid</code>.
     */
    public final TableField<PgTriggerRecord, Long> TGRELID = createField(DSL.name("tgrelid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgparentid</code>.
     */
    public final TableField<PgTriggerRecord, Long> TGPARENTID = createField(DSL.name("tgparentid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgname</code>.
     */
    public final TableField<PgTriggerRecord, String> TGNAME = createField(DSL.name("tgname"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgfoid</code>.
     */
    public final TableField<PgTriggerRecord, Long> TGFOID = createField(DSL.name("tgfoid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgtype</code>.
     */
    public final TableField<PgTriggerRecord, Short> TGTYPE = createField(DSL.name("tgtype"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgenabled</code>.
     */
    public final TableField<PgTriggerRecord, String> TGENABLED = createField(DSL.name("tgenabled"), SQLDataType.CHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgisinternal</code>.
     */
    public final TableField<PgTriggerRecord, Boolean> TGISINTERNAL = createField(DSL.name("tgisinternal"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgconstrrelid</code>.
     */
    public final TableField<PgTriggerRecord, Long> TGCONSTRRELID = createField(DSL.name("tgconstrrelid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgconstrindid</code>.
     */
    public final TableField<PgTriggerRecord, Long> TGCONSTRINDID = createField(DSL.name("tgconstrindid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgconstraint</code>.
     */
    public final TableField<PgTriggerRecord, Long> TGCONSTRAINT = createField(DSL.name("tgconstraint"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgdeferrable</code>.
     */
    public final TableField<PgTriggerRecord, Boolean> TGDEFERRABLE = createField(DSL.name("tgdeferrable"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tginitdeferred</code>.
     */
    public final TableField<PgTriggerRecord, Boolean> TGINITDEFERRED = createField(DSL.name("tginitdeferred"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgnargs</code>.
     */
    public final TableField<PgTriggerRecord, Short> TGNARGS = createField(DSL.name("tgnargs"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgattr</code>.
     */
    public final TableField<PgTriggerRecord, Object[]> TGATTR = createField(DSL.name("tgattr"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"nt2vector\"").nullable(false).array(), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgargs</code>.
     */
    public final TableField<PgTriggerRecord, byte[]> TGARGS = createField(DSL.name("tgargs"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<PgTriggerRecord, Object> TGQUAL = createField(DSL.name("tgqual"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\""), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgoldtable</code>.
     */
    public final TableField<PgTriggerRecord, String> TGOLDTABLE = createField(DSL.name("tgoldtable"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgnewtable</code>.
     */
    public final TableField<PgTriggerRecord, String> TGNEWTABLE = createField(DSL.name("tgnewtable"), SQLDataType.VARCHAR, this, "");

    private PgTrigger(Name alias, Table<PgTriggerRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgTrigger(Name alias, Table<PgTriggerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_trigger</code> table reference
     */
    public PgTrigger(String alias) {
        this(DSL.name(alias), PG_TRIGGER);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_trigger</code> table reference
     */
    public PgTrigger(Name alias) {
        this(alias, PG_TRIGGER);
    }

    /**
     * Create a <code>pg_catalog.pg_trigger</code> table reference
     */
    public PgTrigger() {
        this(DSL.name("pg_trigger"), null);
    }

    public <O extends Record> PgTrigger(Table<O> child, ForeignKey<O, PgTriggerRecord> key) {
        super(child, key, PG_TRIGGER);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PG_TRIGGER_TGCONSTRAINT_INDEX);
    }

    @Override
    @NotNull
    public UniqueKey<PgTriggerRecord> getPrimaryKey() {
        return Keys.PG_TRIGGER_OID_INDEX;
    }

    @Override
    @NotNull
    public List<UniqueKey<PgTriggerRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_TRIGGER_TGRELID_TGNAME_INDEX);
    }

    @Override
    @NotNull
    public PgTrigger as(String alias) {
        return new PgTrigger(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgTrigger as(Name alias) {
        return new PgTrigger(alias, this);
    }

    @Override
    @NotNull
    public PgTrigger as(Table<?> alias) {
        return new PgTrigger(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgTrigger rename(String name) {
        return new PgTrigger(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgTrigger rename(Name name) {
        return new PgTrigger(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgTrigger rename(Table<?> name) {
        return new PgTrigger(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row19<Long, Long, Long, String, Long, Short, String, Boolean, Long, Long, Long, Boolean, Boolean, Short, Object[], byte[], Object, String, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super Long, ? super Long, ? super Long, ? super String, ? super Long, ? super Short, ? super String, ? super Boolean, ? super Long, ? super Long, ? super Long, ? super Boolean, ? super Boolean, ? super Short, ? super Object[], ? super byte[], ? super Object, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super Long, ? super Long, ? super Long, ? super String, ? super Long, ? super Short, ? super String, ? super Boolean, ? super Long, ? super Long, ? super Long, ? super Boolean, ? super Boolean, ? super Short, ? super Object[], ? super byte[], ? super Object, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
