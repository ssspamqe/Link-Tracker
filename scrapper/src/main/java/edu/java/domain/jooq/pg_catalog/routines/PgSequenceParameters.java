/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.routines;


import edu.java.domain.jooq.pg_catalog.PgCatalog;

import javax.annotation.processing.Generated;

import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgSequenceParameters extends AbstractRoutine<java.lang.Void> {

    private static final long serialVersionUID = 1L;

    public static final Parameter<Long> SEQUENCE_OID = Internal.createParameter("sequence_oid", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> START_VALUE = Internal.createParameter("start_value", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> MINIMUM_VALUE = Internal.createParameter("minimum_value", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> MAXIMUM_VALUE = Internal.createParameter("maximum_value", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> INCREMENT = Internal.createParameter("increment", SQLDataType.BIGINT, false, false);

    public static final Parameter<Boolean> CYCLE_OPTION = Internal.createParameter("cycle_option", SQLDataType.BOOLEAN, false, false);

    public static final Parameter<Long> CACHE_SIZE = Internal.createParameter("cache_size", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> DATA_TYPE = Internal.createParameter("data_type", SQLDataType.BIGINT, false, false);

    public PgSequenceParameters() {
        super("pg_sequence_parameters", PgCatalog.PG_CATALOG);

        addInParameter(SEQUENCE_OID);
        addOutParameter(START_VALUE);
        addOutParameter(MINIMUM_VALUE);
        addOutParameter(MAXIMUM_VALUE);
        addOutParameter(INCREMENT);
        addOutParameter(CYCLE_OPTION);
        addOutParameter(CACHE_SIZE);
        addOutParameter(DATA_TYPE);
    }

    public void setSequenceOid(Long value) {
        setValue(SEQUENCE_OID, value);
    }

    public Long getStartValue() {
        return get(START_VALUE);
    }

    public Long getMinimumValue() {
        return get(MINIMUM_VALUE);
    }

    public Long getMaximumValue() {
        return get(MAXIMUM_VALUE);
    }

    public Long getIncrement() {
        return get(INCREMENT);
    }

    public Boolean getCycleOption() {
        return get(CYCLE_OPTION);
    }

    public Long getCacheSize() {
        return get(CACHE_SIZE);
    }

    public Long getDataType() {
        return get(DATA_TYPE);
    }
}
