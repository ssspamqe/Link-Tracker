/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.routines;


import edu.java.domain.jooq.pg_catalog.PgCatalog;

import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgControlCheckpoint extends AbstractRoutine<java.lang.Void> {

    private static final long serialVersionUID = 1L;

    @Deprecated
    public static final Parameter<Object> CHECKPOINT_LSN = Internal.createParameter("checkpoint_lsn", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), false, false);

    @Deprecated
    public static final Parameter<Object> REDO_LSN = Internal.createParameter("redo_lsn", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), false, false);

    public static final Parameter<String> REDO_WAL_FILE = Internal.createParameter("redo_wal_file", SQLDataType.CLOB, false, false);

    public static final Parameter<Integer> TIMELINE_ID = Internal.createParameter("timeline_id", SQLDataType.INTEGER, false, false);

    public static final Parameter<Integer> PREV_TIMELINE_ID = Internal.createParameter("prev_timeline_id", SQLDataType.INTEGER, false, false);

    public static final Parameter<Boolean> FULL_PAGE_WRITES = Internal.createParameter("full_page_writes", SQLDataType.BOOLEAN, false, false);

    public static final Parameter<String> NEXT_XID = Internal.createParameter("next_xid", SQLDataType.CLOB, false, false);

    public static final Parameter<Long> NEXT_OID = Internal.createParameter("next_oid", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> NEXT_MULTIXACT_ID = Internal.createParameter("next_multixact_id", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> NEXT_MULTI_OFFSET = Internal.createParameter("next_multi_offset", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> OLDEST_XID = Internal.createParameter("oldest_xid", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> OLDEST_XID_DBID = Internal.createParameter("oldest_xid_dbid", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> OLDEST_ACTIVE_XID = Internal.createParameter("oldest_active_xid", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> OLDEST_MULTI_XID = Internal.createParameter("oldest_multi_xid", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> OLDEST_MULTI_DBID = Internal.createParameter("oldest_multi_dbid", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> OLDEST_COMMIT_TS_XID = Internal.createParameter("oldest_commit_ts_xid", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> NEWEST_COMMIT_TS_XID = Internal.createParameter("newest_commit_ts_xid", SQLDataType.BIGINT, false, false);

    public static final Parameter<OffsetDateTime> CHECKPOINT_TIME = Internal.createParameter("checkpoint_time", SQLDataType.TIMESTAMPWITHTIMEZONE(6), false, false);

    public PgControlCheckpoint() {
        super("pg_control_checkpoint", PgCatalog.PG_CATALOG);

        addOutParameter(CHECKPOINT_LSN);
        addOutParameter(REDO_LSN);
        addOutParameter(REDO_WAL_FILE);
        addOutParameter(TIMELINE_ID);
        addOutParameter(PREV_TIMELINE_ID);
        addOutParameter(FULL_PAGE_WRITES);
        addOutParameter(NEXT_XID);
        addOutParameter(NEXT_OID);
        addOutParameter(NEXT_MULTIXACT_ID);
        addOutParameter(NEXT_MULTI_OFFSET);
        addOutParameter(OLDEST_XID);
        addOutParameter(OLDEST_XID_DBID);
        addOutParameter(OLDEST_ACTIVE_XID);
        addOutParameter(OLDEST_MULTI_XID);
        addOutParameter(OLDEST_MULTI_DBID);
        addOutParameter(OLDEST_COMMIT_TS_XID);
        addOutParameter(NEWEST_COMMIT_TS_XID);
        addOutParameter(CHECKPOINT_TIME);
    }

    @Deprecated
    public Object getCheckpointLsn() {
        return get(CHECKPOINT_LSN);
    }

    @Deprecated
    public Object getRedoLsn() {
        return get(REDO_LSN);
    }

    public String getRedoWalFile() {
        return get(REDO_WAL_FILE);
    }

    public Integer getTimelineId() {
        return get(TIMELINE_ID);
    }

    public Integer getPrevTimelineId() {
        return get(PREV_TIMELINE_ID);
    }

    public Boolean getFullPageWrites() {
        return get(FULL_PAGE_WRITES);
    }

    public String getNextXid() {
        return get(NEXT_XID);
    }

    public Long getNextOid() {
        return get(NEXT_OID);
    }

    public Long getNextMultixactId() {
        return get(NEXT_MULTIXACT_ID);
    }

    public Long getNextMultiOffset() {
        return get(NEXT_MULTI_OFFSET);
    }

    public Long getOldestXid() {
        return get(OLDEST_XID);
    }

    public Long getOldestXidDbid() {
        return get(OLDEST_XID_DBID);
    }

    public Long getOldestActiveXid() {
        return get(OLDEST_ACTIVE_XID);
    }

    public Long getOldestMultiXid() {
        return get(OLDEST_MULTI_XID);
    }

    public Long getOldestMultiDbid() {
        return get(OLDEST_MULTI_DBID);
    }

    public Long getOldestCommitTsXid() {
        return get(OLDEST_COMMIT_TS_XID);
    }

    public Long getNewestCommitTsXid() {
        return get(NEWEST_COMMIT_TS_XID);
    }

    public OffsetDateTime getCheckpointTime() {
        return get(CHECKPOINT_TIME);
    }
}
