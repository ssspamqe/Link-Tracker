/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.Keys;
import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgTsDictRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>pg_catalog.pg_ts_dict</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgTsDict extends TableImpl<PgTsDictRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_ts_dict</code>
     */
    public static final PgTsDict PG_TS_DICT = new PgTsDict();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PgTsDictRecord> getRecordType() {
        return PgTsDictRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_ts_dict.oid</code>.
     */
    public final TableField<PgTsDictRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_dict.dictname</code>.
     */
    public final TableField<PgTsDictRecord, String> DICTNAME = createField(DSL.name("dictname"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_dict.dictnamespace</code>.
     */
    public final TableField<PgTsDictRecord, Long> DICTNAMESPACE = createField(DSL.name("dictnamespace"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_dict.dictowner</code>.
     */
    public final TableField<PgTsDictRecord, Long> DICTOWNER = createField(DSL.name("dictowner"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_dict.dicttemplate</code>.
     */
    public final TableField<PgTsDictRecord, Long> DICTTEMPLATE = createField(DSL.name("dicttemplate"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_dict.dictinitoption</code>.
     */
    public final TableField<PgTsDictRecord, String> DICTINITOPTION = createField(DSL.name("dictinitoption"), SQLDataType.CLOB, this, "");

    private PgTsDict(Name alias, Table<PgTsDictRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgTsDict(Name alias, Table<PgTsDictRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_dict</code> table reference
     */
    public PgTsDict(String alias) {
        this(DSL.name(alias), PG_TS_DICT);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_dict</code> table reference
     */
    public PgTsDict(Name alias) {
        this(alias, PG_TS_DICT);
    }

    /**
     * Create a <code>pg_catalog.pg_ts_dict</code> table reference
     */
    public PgTsDict() {
        this(DSL.name("pg_ts_dict"), null);
    }

    public <O extends Record> PgTsDict(Table<O> child, ForeignKey<O, PgTsDictRecord> key) {
        super(child, key, PG_TS_DICT);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public UniqueKey<PgTsDictRecord> getPrimaryKey() {
        return Keys.PG_TS_DICT_OID_INDEX;
    }

    @Override
    @NotNull
    public List<UniqueKey<PgTsDictRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_TS_DICT_DICTNAME_INDEX);
    }

    @Override
    @NotNull
    public PgTsDict as(String alias) {
        return new PgTsDict(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgTsDict as(Name alias) {
        return new PgTsDict(alias, this);
    }

    @Override
    @NotNull
    public PgTsDict as(Table<?> alias) {
        return new PgTsDict(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgTsDict rename(String name) {
        return new PgTsDict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgTsDict rename(Name name) {
        return new PgTsDict(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgTsDict rename(Table<?> name) {
        return new PgTsDict(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row6<Long, String, Long, Long, Long, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super Long, ? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super Long, ? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
