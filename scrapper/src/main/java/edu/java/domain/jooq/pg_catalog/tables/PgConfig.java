/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgConfigRecord;

import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>pg_catalog.pg_config</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgConfig extends TableImpl<PgConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_config</code>
     */
    public static final PgConfig PG_CONFIG = new PgConfig();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PgConfigRecord> getRecordType() {
        return PgConfigRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_config.name</code>.
     */
    public final TableField<PgConfigRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_config.setting</code>.
     */
    public final TableField<PgConfigRecord, String> SETTING = createField(DSL.name("setting"), SQLDataType.CLOB, this, "");

    private PgConfig(Name alias, Table<PgConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgConfig(Name alias, Table<PgConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_config" as  SELECT name,
         setting
        FROM pg_config() pg_config(name, setting);
        """));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_config</code> table reference
     */
    public PgConfig(String alias) {
        this(DSL.name(alias), PG_CONFIG);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_config</code> table reference
     */
    public PgConfig(Name alias) {
        this(alias, PG_CONFIG);
    }

    /**
     * Create a <code>pg_catalog.pg_config</code> table reference
     */
    public PgConfig() {
        this(DSL.name("pg_config"), null);
    }

    public <O extends Record> PgConfig(Table<O> child, ForeignKey<O, PgConfigRecord> key) {
        super(child, key, PG_CONFIG);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgConfig as(String alias) {
        return new PgConfig(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgConfig as(Name alias) {
        return new PgConfig(alias, this);
    }

    @Override
    @NotNull
    public PgConfig as(Table<?> alias) {
        return new PgConfig(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgConfig rename(String name) {
        return new PgConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgConfig rename(Name name) {
        return new PgConfig(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgConfig rename(Table<?> name) {
        return new PgConfig(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
