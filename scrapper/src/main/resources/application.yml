app:
  scheduler-config:
    enable: true
    interval: 10000
    force-check-delay: 10000

  database-access-type: jdbc
  processed-updates-metric-name: processed_link_updates_total

trackable-services:
  git-hub-config:
    url:
      default-url: https://api.github.com/
    host-name: github.com
    retry-config:
      type: constant
      delay: 2s
      max-retries: 3
      retry-on-statuses:
        - SERVER_ERROR

  stackoverflow-config:
    url:
      default-url: https://api.stackexchange.com/2.3/
    host-name: stackoverflow.com
    retry-config:
      type: constant
      delay: 2s
      max-retries: 3
      retry-on-statuses:
        - SERVER_ERROR

telegram-bot:
  connection-type: kafka
  kafka-configuration:
    topic-configurations:
      - name: linkUpdates
        partitions: 1
        replicas: 1
    producer-configuration:
      bootstrap-servers: localhost:9092
      link-updates-topic: linkUpdates
      client-id: scrapperProducerGroup
      acks-config: 1
      delivery-timeout: 100000
      linger-ms: 5000
      batch-size: 200000
      enable-idempotence: true
  rest-configuration:
    url:
      default-url: localhost:8090
    retry-config:
      type: constant
      delay: 2s
      max-retries: 3
      retry-on-statuses:
        - SERVER_ERROR


management:
  metrics:
    tags:
      application: ${spring.application.name}

  endpoint:
    health:
      enabled: true
    info:
      enabled: true
    prometheus:
      enabled: true

  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        prometheus: "metrics"
      cors:
        allowed-origins: "*"
        allowed-methods: "*"
    enabled-by-default: false
  server:
    port: 8081
spring:
  application:
    name: scrapper
  data:
    redis:
      host: localhost
      port: 6379
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/scrapper
    password: postgres
    username: postgres
  docker:
    compose:
      enabled: true
      file: compose.yml
  jooq:
    sql-dialect: postgres
  jpa:
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  cache:
    cache-names: rate-limit-bucket
    caffeine:
      spec: maximumSize=50000,expireAfterAccess=3600s

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-bucket
      url: .*
      strategy: first
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - cache-key: getRemoteAddr()
          bandwidths:
            - capacity: 10
              time: 1
              unit: minutes

server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml

springdoc:
  show-actuator: false
  swagger-ui:
    path: /scrapper/api/v1/swagger-ui
