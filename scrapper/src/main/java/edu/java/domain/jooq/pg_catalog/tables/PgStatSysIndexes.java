/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgStatSysIndexesRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatSysIndexes extends TableImpl<PgStatSysIndexesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_stat_sys_indexes</code>
     */
    public static final PgStatSysIndexes PG_STAT_SYS_INDEXES = new PgStatSysIndexes();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PgStatSysIndexesRecord> getRecordType() {
        return PgStatSysIndexesRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_stat_sys_indexes.relid</code>.
     */
    public final TableField<PgStatSysIndexesRecord, Long> RELID = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_sys_indexes.indexrelid</code>.
     */
    public final TableField<PgStatSysIndexesRecord, Long> INDEXRELID = createField(DSL.name("indexrelid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_sys_indexes.schemaname</code>.
     */
    public final TableField<PgStatSysIndexesRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_sys_indexes.relname</code>.
     */
    public final TableField<PgStatSysIndexesRecord, String> RELNAME = createField(DSL.name("relname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_sys_indexes.indexrelname</code>.
     */
    public final TableField<PgStatSysIndexesRecord, String> INDEXRELNAME = createField(DSL.name("indexrelname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_sys_indexes.idx_scan</code>.
     */
    public final TableField<PgStatSysIndexesRecord, Long> IDX_SCAN = createField(DSL.name("idx_scan"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_sys_indexes.last_idx_scan</code>.
     */
    public final TableField<PgStatSysIndexesRecord, OffsetDateTime> LAST_IDX_SCAN = createField(DSL.name("last_idx_scan"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>pg_catalog.pg_stat_sys_indexes.idx_tup_read</code>.
     */
    public final TableField<PgStatSysIndexesRecord, Long> IDX_TUP_READ = createField(DSL.name("idx_tup_read"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_sys_indexes.idx_tup_fetch</code>.
     */
    public final TableField<PgStatSysIndexesRecord, Long> IDX_TUP_FETCH = createField(DSL.name("idx_tup_fetch"), SQLDataType.BIGINT, this, "");

    private PgStatSysIndexes(Name alias, Table<PgStatSysIndexesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatSysIndexes(Name alias, Table<PgStatSysIndexesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_stat_sys_indexes" as  SELECT relid,
          indexrelid,
          schemaname,
          relname,
          indexrelname,
          idx_scan,
          last_idx_scan,
          idx_tup_read,
          idx_tup_fetch
         FROM pg_stat_all_indexes
        WHERE ((schemaname = ANY (ARRAY['pg_catalog'::name, 'information_schema'::name])) OR (schemaname ~ '^pg_toast'::text));
        """));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_sys_indexes</code> table
     * reference
     */
    public PgStatSysIndexes(String alias) {
        this(DSL.name(alias), PG_STAT_SYS_INDEXES);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_sys_indexes</code> table
     * reference
     */
    public PgStatSysIndexes(Name alias) {
        this(alias, PG_STAT_SYS_INDEXES);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_sys_indexes</code> table reference
     */
    public PgStatSysIndexes() {
        this(DSL.name("pg_stat_sys_indexes"), null);
    }

    public <O extends Record> PgStatSysIndexes(Table<O> child, ForeignKey<O, PgStatSysIndexesRecord> key) {
        super(child, key, PG_STAT_SYS_INDEXES);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgStatSysIndexes as(String alias) {
        return new PgStatSysIndexes(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgStatSysIndexes as(Name alias) {
        return new PgStatSysIndexes(alias, this);
    }

    @Override
    @NotNull
    public PgStatSysIndexes as(Table<?> alias) {
        return new PgStatSysIndexes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgStatSysIndexes rename(String name) {
        return new PgStatSysIndexes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgStatSysIndexes rename(Name name) {
        return new PgStatSysIndexes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgStatSysIndexes rename(Table<?> name) {
        return new PgStatSysIndexes(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row9<Long, Long, String, String, String, Long, OffsetDateTime, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
