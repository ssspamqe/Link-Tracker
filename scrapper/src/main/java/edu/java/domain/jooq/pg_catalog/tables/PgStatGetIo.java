/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgStatGetIoRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Function18;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>pg_catalog.pg_stat_get_io</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatGetIo extends TableImpl<PgStatGetIoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_stat_get_io</code>
     */
    public static final PgStatGetIo PG_STAT_GET_IO = new PgStatGetIo();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PgStatGetIoRecord> getRecordType() {
        return PgStatGetIoRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_stat_get_io.backend_type</code>.
     */
    public final TableField<PgStatGetIoRecord, String> BACKEND_TYPE = createField(DSL.name("backend_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.object</code>.
     */
    public final TableField<PgStatGetIoRecord, String> OBJECT = createField(DSL.name("object"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.context</code>.
     */
    public final TableField<PgStatGetIoRecord, String> CONTEXT = createField(DSL.name("context"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.reads</code>.
     */
    public final TableField<PgStatGetIoRecord, Long> READS = createField(DSL.name("reads"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.read_time</code>.
     */
    public final TableField<PgStatGetIoRecord, Double> READ_TIME = createField(DSL.name("read_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.writes</code>.
     */
    public final TableField<PgStatGetIoRecord, Long> WRITES = createField(DSL.name("writes"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.write_time</code>.
     */
    public final TableField<PgStatGetIoRecord, Double> WRITE_TIME = createField(DSL.name("write_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.writebacks</code>.
     */
    public final TableField<PgStatGetIoRecord, Long> WRITEBACKS = createField(DSL.name("writebacks"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.writeback_time</code>.
     */
    public final TableField<PgStatGetIoRecord, Double> WRITEBACK_TIME = createField(DSL.name("writeback_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.extends</code>.
     */
    public final TableField<PgStatGetIoRecord, Long> EXTENDS = createField(DSL.name("extends"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.extend_time</code>.
     */
    public final TableField<PgStatGetIoRecord, Double> EXTEND_TIME = createField(DSL.name("extend_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.op_bytes</code>.
     */
    public final TableField<PgStatGetIoRecord, Long> OP_BYTES = createField(DSL.name("op_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.hits</code>.
     */
    public final TableField<PgStatGetIoRecord, Long> HITS = createField(DSL.name("hits"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.evictions</code>.
     */
    public final TableField<PgStatGetIoRecord, Long> EVICTIONS = createField(DSL.name("evictions"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.reuses</code>.
     */
    public final TableField<PgStatGetIoRecord, Long> REUSES = createField(DSL.name("reuses"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.fsyncs</code>.
     */
    public final TableField<PgStatGetIoRecord, Long> FSYNCS = createField(DSL.name("fsyncs"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.fsync_time</code>.
     */
    public final TableField<PgStatGetIoRecord, Double> FSYNC_TIME = createField(DSL.name("fsync_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_get_io.stats_reset</code>.
     */
    public final TableField<PgStatGetIoRecord, OffsetDateTime> STATS_RESET = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgStatGetIo(Name alias, Table<PgStatGetIoRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private PgStatGetIo(Name alias, Table<PgStatGetIoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_get_io</code> table reference
     */
    public PgStatGetIo(String alias) {
        this(DSL.name(alias), PG_STAT_GET_IO);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_get_io</code> table reference
     */
    public PgStatGetIo(Name alias) {
        this(alias, PG_STAT_GET_IO);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_get_io</code> table reference
     */
    public PgStatGetIo() {
        this(DSL.name("pg_stat_get_io"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgStatGetIo as(String alias) {
        return new PgStatGetIo(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public PgStatGetIo as(Name alias) {
        return new PgStatGetIo(alias, this, parameters);
    }

    @Override
    @NotNull
    public PgStatGetIo as(Table<?> alias) {
        return new PgStatGetIo(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgStatGetIo rename(String name) {
        return new PgStatGetIo(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgStatGetIo rename(Name name) {
        return new PgStatGetIo(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgStatGetIo rename(Table<?> name) {
        return new PgStatGetIo(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row18<String, String, String, Long, Double, Long, Double, Long, Double, Long, Double, Long, Long, Long, Long, Long, Double, OffsetDateTime> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public PgStatGetIo call() {
        PgStatGetIo result = new PgStatGetIo(DSL.name("pg_stat_get_io"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function18<? super String, ? super String, ? super String, ? super Long, ? super Double, ? super Long, ? super Double, ? super Long, ? super Double, ? super Long, ? super Double, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Double, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function18<? super String, ? super String, ? super String, ? super Long, ? super Double, ? super Long, ? super Double, ? super Long, ? super Double, ? super Long, ? super Double, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Double, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
