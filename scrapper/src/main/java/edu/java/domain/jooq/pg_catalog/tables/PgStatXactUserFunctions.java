/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgStatXactUserFunctionsRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatXactUserFunctions extends TableImpl<PgStatXactUserFunctionsRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgStatXactUserFunctions PG_STAT_XACT_USER_FUNCTIONS = new PgStatXactUserFunctions();

    @Override
    @NotNull
    public Class<PgStatXactUserFunctionsRecord> getRecordType() {
        return PgStatXactUserFunctionsRecord.class;
    }

    public final TableField<PgStatXactUserFunctionsRecord, Long> FUNCID = createField(DSL.name("funcid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatXactUserFunctionsRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgStatXactUserFunctionsRecord, String> FUNCNAME = createField(DSL.name("funcname"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgStatXactUserFunctionsRecord, Long> CALLS = createField(DSL.name("calls"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatXactUserFunctionsRecord, Double> TOTAL_TIME = createField(DSL.name("total_time"), SQLDataType.DOUBLE, this, "");

    public final TableField<PgStatXactUserFunctionsRecord, Double> SELF_TIME = createField(DSL.name("self_time"), SQLDataType.DOUBLE, this, "");

    private PgStatXactUserFunctions(Name alias, Table<PgStatXactUserFunctionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatXactUserFunctions(Name alias, Table<PgStatXactUserFunctionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_stat_xact_user_functions" as  SELECT p.oid AS funcid,
          n.nspname AS schemaname,
          p.proname AS funcname,
          pg_stat_get_xact_function_calls(p.oid) AS calls,
          pg_stat_get_xact_function_total_time(p.oid) AS total_time,
          pg_stat_get_xact_function_self_time(p.oid) AS self_time
         FROM (pg_proc p
           LEFT JOIN pg_namespace n ON ((n.oid = p.pronamespace)))
        WHERE ((p.prolang <> (12)::oid) AND (pg_stat_get_xact_function_calls(p.oid) IS NOT NULL));
        """));
    }

    public PgStatXactUserFunctions(String alias) {
        this(DSL.name(alias), PG_STAT_XACT_USER_FUNCTIONS);
    }

    public PgStatXactUserFunctions(Name alias) {
        this(alias, PG_STAT_XACT_USER_FUNCTIONS);
    }

    public PgStatXactUserFunctions() {
        this(DSL.name("pg_stat_xact_user_functions"), null);
    }

    public <O extends Record> PgStatXactUserFunctions(Table<O> child, ForeignKey<O, PgStatXactUserFunctionsRecord> key) {
        super(child, key, PG_STAT_XACT_USER_FUNCTIONS);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgStatXactUserFunctions as(String alias) {
        return new PgStatXactUserFunctions(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgStatXactUserFunctions as(Name alias) {
        return new PgStatXactUserFunctions(alias, this);
    }

    @Override
    @NotNull
    public PgStatXactUserFunctions as(Table<?> alias) {
        return new PgStatXactUserFunctions(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgStatXactUserFunctions rename(String name) {
        return new PgStatXactUserFunctions(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgStatXactUserFunctions rename(Name name) {
        return new PgStatXactUserFunctions(name, null);
    }

    @Override
    @NotNull
    public PgStatXactUserFunctions rename(Table<?> name) {
        return new PgStatXactUserFunctions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row6<Long, String, String, Long, Double, Double> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super String, ? super Long, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super String, ? super Long, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
