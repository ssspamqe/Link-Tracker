/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.routines;


import edu.java.domain.jooq.pg_catalog.PgCatalog;

import java.math.BigDecimal;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatGetWal extends AbstractRoutine<java.lang.Void> {

    private static final long serialVersionUID = 1L;

    public static final Parameter<Long> WAL_RECORDS = Internal.createParameter("wal_records", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> WAL_FPI = Internal.createParameter("wal_fpi", SQLDataType.BIGINT, false, false);

    public static final Parameter<BigDecimal> WAL_BYTES = Internal.createParameter("wal_bytes", SQLDataType.NUMERIC, false, false);

    public static final Parameter<Long> WAL_BUFFERS_FULL = Internal.createParameter("wal_buffers_full", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> WAL_WRITE = Internal.createParameter("wal_write", SQLDataType.BIGINT, false, false);

    public static final Parameter<Long> WAL_SYNC = Internal.createParameter("wal_sync", SQLDataType.BIGINT, false, false);

    public static final Parameter<Double> WAL_WRITE_TIME = Internal.createParameter("wal_write_time", SQLDataType.DOUBLE, false, false);

    public static final Parameter<Double> WAL_SYNC_TIME = Internal.createParameter("wal_sync_time", SQLDataType.DOUBLE, false, false);

    public static final Parameter<OffsetDateTime> STATS_RESET = Internal.createParameter("stats_reset", SQLDataType.TIMESTAMPWITHTIMEZONE(6), false, false);

    public PgStatGetWal() {
        super("pg_stat_get_wal", PgCatalog.PG_CATALOG);

        addOutParameter(WAL_RECORDS);
        addOutParameter(WAL_FPI);
        addOutParameter(WAL_BYTES);
        addOutParameter(WAL_BUFFERS_FULL);
        addOutParameter(WAL_WRITE);
        addOutParameter(WAL_SYNC);
        addOutParameter(WAL_WRITE_TIME);
        addOutParameter(WAL_SYNC_TIME);
        addOutParameter(STATS_RESET);
    }

    public Long getWalRecords() {
        return get(WAL_RECORDS);
    }

    public Long getWalFpi() {
        return get(WAL_FPI);
    }

    public BigDecimal getWalBytes() {
        return get(WAL_BYTES);
    }

    public Long getWalBuffersFull() {
        return get(WAL_BUFFERS_FULL);
    }

    public Long getWalWrite() {
        return get(WAL_WRITE);
    }

    public Long getWalSync() {
        return get(WAL_SYNC);
    }

    public Double getWalWriteTime() {
        return get(WAL_WRITE_TIME);
    }

    public Double getWalSyncTime() {
        return get(WAL_SYNC_TIME);
    }

    public OffsetDateTime getStatsReset() {
        return get(STATS_RESET);
    }
}
