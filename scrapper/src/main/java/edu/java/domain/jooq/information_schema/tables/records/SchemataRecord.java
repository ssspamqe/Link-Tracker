/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.information_schema.tables.records;


import edu.java.domain.jooq.information_schema.tables.Schemata;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SchemataRecord extends TableRecordImpl<SchemataRecord> implements Record7<String, String, String, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>information_schema.schemata.catalog_name</code>.
     */
    public void setCatalogName(@Nullable String value) {
        set(0, value);
    }

    /**
     * Getter for <code>information_schema.schemata.catalog_name</code>.
     */
    @Nullable
    public String getCatalogName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>information_schema.schemata.schema_name</code>.
     */
    public void setSchemaName(@Nullable String value) {
        set(1, value);
    }

    /**
     * Getter for <code>information_schema.schemata.schema_name</code>.
     */
    @Nullable
    public String getSchemaName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>information_schema.schemata.schema_owner</code>.
     */
    public void setSchemaOwner(@Nullable String value) {
        set(2, value);
    }

    /**
     * Getter for <code>information_schema.schemata.schema_owner</code>.
     */
    @Nullable
    public String getSchemaOwner() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>information_schema.schemata.default_character_set_catalog</code>.
     */
    public void setDefaultCharacterSetCatalog(@Nullable String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>information_schema.schemata.default_character_set_catalog</code>.
     */
    @Nullable
    public String getDefaultCharacterSetCatalog() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>information_schema.schemata.default_character_set_schema</code>.
     */
    public void setDefaultCharacterSetSchema(@Nullable String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>information_schema.schemata.default_character_set_schema</code>.
     */
    @Nullable
    public String getDefaultCharacterSetSchema() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>information_schema.schemata.default_character_set_name</code>.
     */
    public void setDefaultCharacterSetName(@Nullable String value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>information_schema.schemata.default_character_set_name</code>.
     */
    @Nullable
    public String getDefaultCharacterSetName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>information_schema.schemata.sql_path</code>.
     */
    public void setSqlPath(@Nullable String value) {
        set(6, value);
    }

    /**
     * Getter for <code>information_schema.schemata.sql_path</code>.
     */
    @Nullable
    public String getSqlPath() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row7<String, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row7<String, String, String, String, String, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<String> field1() {
        return Schemata.SCHEMATA.CATALOG_NAME;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return Schemata.SCHEMATA.SCHEMA_NAME;
    }

    @Override
    @NotNull
    public Field<String> field3() {
        return Schemata.SCHEMATA.SCHEMA_OWNER;
    }

    @Override
    @NotNull
    public Field<String> field4() {
        return Schemata.SCHEMATA.DEFAULT_CHARACTER_SET_CATALOG;
    }

    @Override
    @NotNull
    public Field<String> field5() {
        return Schemata.SCHEMATA.DEFAULT_CHARACTER_SET_SCHEMA;
    }

    @Override
    @NotNull
    public Field<String> field6() {
        return Schemata.SCHEMATA.DEFAULT_CHARACTER_SET_NAME;
    }

    @Override
    @NotNull
    public Field<String> field7() {
        return Schemata.SCHEMATA.SQL_PATH;
    }

    @Override
    @Nullable
    public String component1() {
        return getCatalogName();
    }

    @Override
    @Nullable
    public String component2() {
        return getSchemaName();
    }

    @Override
    @Nullable
    public String component3() {
        return getSchemaOwner();
    }

    @Override
    @Nullable
    public String component4() {
        return getDefaultCharacterSetCatalog();
    }

    @Override
    @Nullable
    public String component5() {
        return getDefaultCharacterSetSchema();
    }

    @Override
    @Nullable
    public String component6() {
        return getDefaultCharacterSetName();
    }

    @Override
    @Nullable
    public String component7() {
        return getSqlPath();
    }

    @Override
    @Nullable
    public String value1() {
        return getCatalogName();
    }

    @Override
    @Nullable
    public String value2() {
        return getSchemaName();
    }

    @Override
    @Nullable
    public String value3() {
        return getSchemaOwner();
    }

    @Override
    @Nullable
    public String value4() {
        return getDefaultCharacterSetCatalog();
    }

    @Override
    @Nullable
    public String value5() {
        return getDefaultCharacterSetSchema();
    }

    @Override
    @Nullable
    public String value6() {
        return getDefaultCharacterSetName();
    }

    @Override
    @Nullable
    public String value7() {
        return getSqlPath();
    }

    @Override
    @NotNull
    public SchemataRecord value1(@Nullable String value) {
        setCatalogName(value);
        return this;
    }

    @Override
    @NotNull
    public SchemataRecord value2(@Nullable String value) {
        setSchemaName(value);
        return this;
    }

    @Override
    @NotNull
    public SchemataRecord value3(@Nullable String value) {
        setSchemaOwner(value);
        return this;
    }

    @Override
    @NotNull
    public SchemataRecord value4(@Nullable String value) {
        setDefaultCharacterSetCatalog(value);
        return this;
    }

    @Override
    @NotNull
    public SchemataRecord value5(@Nullable String value) {
        setDefaultCharacterSetSchema(value);
        return this;
    }

    @Override
    @NotNull
    public SchemataRecord value6(@Nullable String value) {
        setDefaultCharacterSetName(value);
        return this;
    }

    @Override
    @NotNull
    public SchemataRecord value7(@Nullable String value) {
        setSqlPath(value);
        return this;
    }

    @Override
    @NotNull
    public SchemataRecord values(@Nullable String value1, @Nullable String value2, @Nullable String value3, @Nullable String value4, @Nullable String value5, @Nullable String value6, @Nullable String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SchemataRecord
     */
    public SchemataRecord() {
        super(Schemata.SCHEMATA);
    }

    /**
     * Create a detached, initialised SchemataRecord
     */
    @ConstructorProperties({ "catalogName", "schemaName", "schemaOwner", "defaultCharacterSetCatalog", "defaultCharacterSetSchema", "defaultCharacterSetName", "sqlPath" })
    public SchemataRecord(@Nullable String catalogName, @Nullable String schemaName, @Nullable String schemaOwner, @Nullable String defaultCharacterSetCatalog, @Nullable String defaultCharacterSetSchema, @Nullable String defaultCharacterSetName, @Nullable String sqlPath) {
        super(Schemata.SCHEMATA);

        setCatalogName(catalogName);
        setSchemaName(schemaName);
        setSchemaOwner(schemaOwner);
        setDefaultCharacterSetCatalog(defaultCharacterSetCatalog);
        setDefaultCharacterSetSchema(defaultCharacterSetSchema);
        setDefaultCharacterSetName(defaultCharacterSetName);
        setSqlPath(sqlPath);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SchemataRecord
     */
    public SchemataRecord(edu.java.domain.jooq.information_schema.tables.pojos.Schemata value) {
        super(Schemata.SCHEMATA);

        if (value != null) {
            setCatalogName(value.getCatalogName());
            setSchemaName(value.getSchemaName());
            setSchemaOwner(value.getSchemaOwner());
            setDefaultCharacterSetCatalog(value.getDefaultCharacterSetCatalog());
            setDefaultCharacterSetSchema(value.getDefaultCharacterSetSchema());
            setDefaultCharacterSetName(value.getDefaultCharacterSetName());
            setSqlPath(value.getSqlPath());
            resetChangedOnNotNull();
        }
    }
}
