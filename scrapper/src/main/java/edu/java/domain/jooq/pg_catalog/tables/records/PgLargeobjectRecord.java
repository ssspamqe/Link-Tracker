/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables.records;


import edu.java.domain.jooq.pg_catalog.tables.PgLargeobject;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgLargeobjectRecord extends UpdatableRecordImpl<PgLargeobjectRecord> implements Record3<Long, Integer, byte[]> {

    private static final long serialVersionUID = 1L;

    public void setLoid(@NotNull Long value) {
        set(0, value);
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getLoid() {
        return (Long) get(0);
    }

    public void setPageno(@NotNull Integer value) {
        set(1, value);
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getPageno() {
        return (Integer) get(1);
    }

    public void setData(@NotNull byte[] value) {
        set(2, value);
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public byte[] getData() {
        return (byte[]) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record2<Long, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<Long, Integer, byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row3<Long, Integer, byte[]> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return PgLargeobject.PG_LARGEOBJECT.LOID;
    }

    @Override
    @NotNull
    public Field<Integer> field2() {
        return PgLargeobject.PG_LARGEOBJECT.PAGENO;
    }

    @Override
    @NotNull
    public Field<byte[]> field3() {
        return PgLargeobject.PG_LARGEOBJECT.DATA;
    }

    @Override
    @NotNull
    public Long component1() {
        return getLoid();
    }

    @Override
    @NotNull
    public Integer component2() {
        return getPageno();
    }

    @Override
    @NotNull
    public byte[] component3() {
        return getData();
    }

    @Override
    @NotNull
    public Long value1() {
        return getLoid();
    }

    @Override
    @NotNull
    public Integer value2() {
        return getPageno();
    }

    @Override
    @NotNull
    public byte[] value3() {
        return getData();
    }

    @Override
    @NotNull
    public PgLargeobjectRecord value1(@NotNull Long value) {
        setLoid(value);
        return this;
    }

    @Override
    @NotNull
    public PgLargeobjectRecord value2(@NotNull Integer value) {
        setPageno(value);
        return this;
    }

    @Override
    @NotNull
    public PgLargeobjectRecord value3(@NotNull byte[] value) {
        setData(value);
        return this;
    }

    @Override
    @NotNull
    public PgLargeobjectRecord values(@NotNull Long value1, @NotNull Integer value2, @NotNull byte[] value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    public PgLargeobjectRecord() {
        super(PgLargeobject.PG_LARGEOBJECT);
    }

    @ConstructorProperties({ "loid", "pageno", "data" })
    public PgLargeobjectRecord(@NotNull Long loid, @NotNull Integer pageno, @NotNull byte[] data) {
        super(PgLargeobject.PG_LARGEOBJECT);

        setLoid(loid);
        setPageno(pageno);
        setData(data);
        resetChangedOnNotNull();
    }

    public PgLargeobjectRecord(edu.java.domain.jooq.pg_catalog.tables.pojos.PgLargeobject value) {
        super(PgLargeobject.PG_LARGEOBJECT);

        if (value != null) {
            setLoid(value.getLoid());
            setPageno(value.getPageno());
            setData(value.getData());
            resetChangedOnNotNull();
        }
    }
}
