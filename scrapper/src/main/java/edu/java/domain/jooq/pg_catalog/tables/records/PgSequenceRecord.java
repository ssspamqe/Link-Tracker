/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables.records;


import edu.java.domain.jooq.pg_catalog.tables.PgSequence;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * The table <code>pg_catalog.pg_sequence</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgSequenceRecord extends UpdatableRecordImpl<PgSequenceRecord> implements Record8<Long, Long, Long, Long, Long, Long, Long, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pg_catalog.pg_sequence.seqrelid</code>.
     */
    public void setSeqrelid(@NotNull Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_sequence.seqrelid</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getSeqrelid() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>pg_catalog.pg_sequence.seqtypid</code>.
     */
    public void setSeqtypid(@NotNull Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_sequence.seqtypid</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getSeqtypid() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>pg_catalog.pg_sequence.seqstart</code>.
     */
    public void setSeqstart(@NotNull Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_sequence.seqstart</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getSeqstart() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>pg_catalog.pg_sequence.seqincrement</code>.
     */
    public void setSeqincrement(@NotNull Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_sequence.seqincrement</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getSeqincrement() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>pg_catalog.pg_sequence.seqmax</code>.
     */
    public void setSeqmax(@NotNull Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_sequence.seqmax</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getSeqmax() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>pg_catalog.pg_sequence.seqmin</code>.
     */
    public void setSeqmin(@NotNull Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_sequence.seqmin</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getSeqmin() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>pg_catalog.pg_sequence.seqcache</code>.
     */
    public void setSeqcache(@NotNull Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_sequence.seqcache</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getSeqcache() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>pg_catalog.pg_sequence.seqcycle</code>.
     */
    public void setSeqcycle(@NotNull Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_sequence.seqcycle</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Boolean getSeqcycle() {
        return (Boolean) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row8<Long, Long, Long, Long, Long, Long, Long, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row8<Long, Long, Long, Long, Long, Long, Long, Boolean> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return PgSequence.PG_SEQUENCE.SEQRELID;
    }

    @Override
    @NotNull
    public Field<Long> field2() {
        return PgSequence.PG_SEQUENCE.SEQTYPID;
    }

    @Override
    @NotNull
    public Field<Long> field3() {
        return PgSequence.PG_SEQUENCE.SEQSTART;
    }

    @Override
    @NotNull
    public Field<Long> field4() {
        return PgSequence.PG_SEQUENCE.SEQINCREMENT;
    }

    @Override
    @NotNull
    public Field<Long> field5() {
        return PgSequence.PG_SEQUENCE.SEQMAX;
    }

    @Override
    @NotNull
    public Field<Long> field6() {
        return PgSequence.PG_SEQUENCE.SEQMIN;
    }

    @Override
    @NotNull
    public Field<Long> field7() {
        return PgSequence.PG_SEQUENCE.SEQCACHE;
    }

    @Override
    @NotNull
    public Field<Boolean> field8() {
        return PgSequence.PG_SEQUENCE.SEQCYCLE;
    }

    @Override
    @NotNull
    public Long component1() {
        return getSeqrelid();
    }

    @Override
    @NotNull
    public Long component2() {
        return getSeqtypid();
    }

    @Override
    @NotNull
    public Long component3() {
        return getSeqstart();
    }

    @Override
    @NotNull
    public Long component4() {
        return getSeqincrement();
    }

    @Override
    @NotNull
    public Long component5() {
        return getSeqmax();
    }

    @Override
    @NotNull
    public Long component6() {
        return getSeqmin();
    }

    @Override
    @NotNull
    public Long component7() {
        return getSeqcache();
    }

    @Override
    @NotNull
    public Boolean component8() {
        return getSeqcycle();
    }

    @Override
    @NotNull
    public Long value1() {
        return getSeqrelid();
    }

    @Override
    @NotNull
    public Long value2() {
        return getSeqtypid();
    }

    @Override
    @NotNull
    public Long value3() {
        return getSeqstart();
    }

    @Override
    @NotNull
    public Long value4() {
        return getSeqincrement();
    }

    @Override
    @NotNull
    public Long value5() {
        return getSeqmax();
    }

    @Override
    @NotNull
    public Long value6() {
        return getSeqmin();
    }

    @Override
    @NotNull
    public Long value7() {
        return getSeqcache();
    }

    @Override
    @NotNull
    public Boolean value8() {
        return getSeqcycle();
    }

    @Override
    @NotNull
    public PgSequenceRecord value1(@NotNull Long value) {
        setSeqrelid(value);
        return this;
    }

    @Override
    @NotNull
    public PgSequenceRecord value2(@NotNull Long value) {
        setSeqtypid(value);
        return this;
    }

    @Override
    @NotNull
    public PgSequenceRecord value3(@NotNull Long value) {
        setSeqstart(value);
        return this;
    }

    @Override
    @NotNull
    public PgSequenceRecord value4(@NotNull Long value) {
        setSeqincrement(value);
        return this;
    }

    @Override
    @NotNull
    public PgSequenceRecord value5(@NotNull Long value) {
        setSeqmax(value);
        return this;
    }

    @Override
    @NotNull
    public PgSequenceRecord value6(@NotNull Long value) {
        setSeqmin(value);
        return this;
    }

    @Override
    @NotNull
    public PgSequenceRecord value7(@NotNull Long value) {
        setSeqcache(value);
        return this;
    }

    @Override
    @NotNull
    public PgSequenceRecord value8(@NotNull Boolean value) {
        setSeqcycle(value);
        return this;
    }

    @Override
    @NotNull
    public PgSequenceRecord values(@NotNull Long value1, @NotNull Long value2, @NotNull Long value3, @NotNull Long value4, @NotNull Long value5, @NotNull Long value6, @NotNull Long value7, @NotNull Boolean value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PgSequenceRecord
     */
    public PgSequenceRecord() {
        super(PgSequence.PG_SEQUENCE);
    }

    /**
     * Create a detached, initialised PgSequenceRecord
     */
    @ConstructorProperties({ "seqrelid", "seqtypid", "seqstart", "seqincrement", "seqmax", "seqmin", "seqcache", "seqcycle" })
    public PgSequenceRecord(@NotNull Long seqrelid, @NotNull Long seqtypid, @NotNull Long seqstart, @NotNull Long seqincrement, @NotNull Long seqmax, @NotNull Long seqmin, @NotNull Long seqcache, @NotNull Boolean seqcycle) {
        super(PgSequence.PG_SEQUENCE);

        setSeqrelid(seqrelid);
        setSeqtypid(seqtypid);
        setSeqstart(seqstart);
        setSeqincrement(seqincrement);
        setSeqmax(seqmax);
        setSeqmin(seqmin);
        setSeqcache(seqcache);
        setSeqcycle(seqcycle);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PgSequenceRecord
     */
    public PgSequenceRecord(edu.java.domain.jooq.pg_catalog.tables.pojos.PgSequence value) {
        super(PgSequence.PG_SEQUENCE);

        if (value != null) {
            setSeqrelid(value.getSeqrelid());
            setSeqtypid(value.getSeqtypid());
            setSeqstart(value.getSeqstart());
            setSeqincrement(value.getSeqincrement());
            setSeqmax(value.getSeqmax());
            setSeqmin(value.getSeqmin());
            setSeqcache(value.getSeqcache());
            setSeqcycle(value.getSeqcycle());
            resetChangedOnNotNull();
        }
    }
}
