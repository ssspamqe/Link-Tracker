/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgPublicationTablesRecord;

import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>pg_catalog.pg_publication_tables</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgPublicationTables extends TableImpl<PgPublicationTablesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_publication_tables</code>
     */
    public static final PgPublicationTables PG_PUBLICATION_TABLES = new PgPublicationTables();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PgPublicationTablesRecord> getRecordType() {
        return PgPublicationTablesRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_publication_tables.pubname</code>.
     */
    public final TableField<PgPublicationTablesRecord, String> PUBNAME = createField(DSL.name("pubname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_publication_tables.schemaname</code>.
     */
    public final TableField<PgPublicationTablesRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_publication_tables.tablename</code>.
     */
    public final TableField<PgPublicationTablesRecord, String> TABLENAME = createField(DSL.name("tablename"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_publication_tables.attnames</code>.
     */
    public final TableField<PgPublicationTablesRecord, String[]> ATTNAMES = createField(DSL.name("attnames"), SQLDataType.VARCHAR.array(), this, "");

    /**
     * The column <code>pg_catalog.pg_publication_tables.rowfilter</code>.
     */
    public final TableField<PgPublicationTablesRecord, String> ROWFILTER = createField(DSL.name("rowfilter"), SQLDataType.CLOB, this, "");

    private PgPublicationTables(Name alias, Table<PgPublicationTablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgPublicationTables(Name alias, Table<PgPublicationTablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_publication_tables" as  SELECT p.pubname,
          n.nspname AS schemaname,
          c.relname AS tablename,
          ( SELECT array_agg(a.attname ORDER BY a.attnum) AS array_agg
                 FROM pg_attribute a
                WHERE ((a.attrelid = gpt.relid) AND (a.attnum = ANY ((gpt.attrs)::smallint[])))) AS attnames,
          pg_get_expr(gpt.qual, gpt.relid) AS rowfilter
         FROM pg_publication p,
          LATERAL pg_get_publication_tables(VARIADIC ARRAY[(p.pubname)::text]) gpt(pubid, relid, attrs, qual),
          (pg_class c
           JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
        WHERE (c.oid = gpt.relid);
        """));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_publication_tables</code> table
     * reference
     */
    public PgPublicationTables(String alias) {
        this(DSL.name(alias), PG_PUBLICATION_TABLES);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_publication_tables</code> table
     * reference
     */
    public PgPublicationTables(Name alias) {
        this(alias, PG_PUBLICATION_TABLES);
    }

    /**
     * Create a <code>pg_catalog.pg_publication_tables</code> table reference
     */
    public PgPublicationTables() {
        this(DSL.name("pg_publication_tables"), null);
    }

    public <O extends Record> PgPublicationTables(Table<O> child, ForeignKey<O, PgPublicationTablesRecord> key) {
        super(child, key, PG_PUBLICATION_TABLES);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgPublicationTables as(String alias) {
        return new PgPublicationTables(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgPublicationTables as(Name alias) {
        return new PgPublicationTables(alias, this);
    }

    @Override
    @NotNull
    public PgPublicationTables as(Table<?> alias) {
        return new PgPublicationTables(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgPublicationTables rename(String name) {
        return new PgPublicationTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgPublicationTables rename(Name name) {
        return new PgPublicationTables(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgPublicationTables rename(Table<?> name) {
        return new PgPublicationTables(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row5<String, String, String, String[], String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String[], ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String[], ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
