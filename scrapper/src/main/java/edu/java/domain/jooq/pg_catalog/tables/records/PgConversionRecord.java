/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables.records;


import edu.java.domain.jooq.pg_catalog.tables.PgConversion;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgConversionRecord extends UpdatableRecordImpl<PgConversionRecord> implements Record8<Long, String, Long, Long, Integer, Integer, String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pg_catalog.pg_conversion.oid</code>.
     */
    public void setOid(@NotNull Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_conversion.oid</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getOid() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>pg_catalog.pg_conversion.conname</code>.
     */
    public void setConname(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_conversion.conname</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public String getConname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>pg_catalog.pg_conversion.connamespace</code>.
     */
    public void setConnamespace(@NotNull Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_conversion.connamespace</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getConnamespace() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>pg_catalog.pg_conversion.conowner</code>.
     */
    public void setConowner(@NotNull Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_conversion.conowner</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getConowner() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>pg_catalog.pg_conversion.conforencoding</code>.
     */
    public void setConforencoding(@NotNull Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_conversion.conforencoding</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getConforencoding() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>pg_catalog.pg_conversion.contoencoding</code>.
     */
    public void setContoencoding(@NotNull Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_conversion.contoencoding</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getContoencoding() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>pg_catalog.pg_conversion.conproc</code>.
     */
    public void setConproc(@NotNull String value) {
        set(6, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_conversion.conproc</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public String getConproc() {
        return (String) get(6);
    }

    /**
     * Setter for <code>pg_catalog.pg_conversion.condefault</code>.
     */
    public void setCondefault(@NotNull Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_conversion.condefault</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Boolean getCondefault() {
        return (Boolean) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row8<Long, String, Long, Long, Integer, Integer, String, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row8<Long, String, Long, Long, Integer, Integer, String, Boolean> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return PgConversion.PG_CONVERSION.OID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return PgConversion.PG_CONVERSION.CONNAME;
    }

    @Override
    @NotNull
    public Field<Long> field3() {
        return PgConversion.PG_CONVERSION.CONNAMESPACE;
    }

    @Override
    @NotNull
    public Field<Long> field4() {
        return PgConversion.PG_CONVERSION.CONOWNER;
    }

    @Override
    @NotNull
    public Field<Integer> field5() {
        return PgConversion.PG_CONVERSION.CONFORENCODING;
    }

    @Override
    @NotNull
    public Field<Integer> field6() {
        return PgConversion.PG_CONVERSION.CONTOENCODING;
    }

    @Override
    @NotNull
    public Field<String> field7() {
        return PgConversion.PG_CONVERSION.CONPROC;
    }

    @Override
    @NotNull
    public Field<Boolean> field8() {
        return PgConversion.PG_CONVERSION.CONDEFAULT;
    }

    @Override
    @NotNull
    public Long component1() {
        return getOid();
    }

    @Override
    @NotNull
    public String component2() {
        return getConname();
    }

    @Override
    @NotNull
    public Long component3() {
        return getConnamespace();
    }

    @Override
    @NotNull
    public Long component4() {
        return getConowner();
    }

    @Override
    @NotNull
    public Integer component5() {
        return getConforencoding();
    }

    @Override
    @NotNull
    public Integer component6() {
        return getContoencoding();
    }

    @Override
    @NotNull
    public String component7() {
        return getConproc();
    }

    @Override
    @NotNull
    public Boolean component8() {
        return getCondefault();
    }

    @Override
    @NotNull
    public Long value1() {
        return getOid();
    }

    @Override
    @NotNull
    public String value2() {
        return getConname();
    }

    @Override
    @NotNull
    public Long value3() {
        return getConnamespace();
    }

    @Override
    @NotNull
    public Long value4() {
        return getConowner();
    }

    @Override
    @NotNull
    public Integer value5() {
        return getConforencoding();
    }

    @Override
    @NotNull
    public Integer value6() {
        return getContoencoding();
    }

    @Override
    @NotNull
    public String value7() {
        return getConproc();
    }

    @Override
    @NotNull
    public Boolean value8() {
        return getCondefault();
    }

    @Override
    @NotNull
    public PgConversionRecord value1(@NotNull Long value) {
        setOid(value);
        return this;
    }

    @Override
    @NotNull
    public PgConversionRecord value2(@NotNull String value) {
        setConname(value);
        return this;
    }

    @Override
    @NotNull
    public PgConversionRecord value3(@NotNull Long value) {
        setConnamespace(value);
        return this;
    }

    @Override
    @NotNull
    public PgConversionRecord value4(@NotNull Long value) {
        setConowner(value);
        return this;
    }

    @Override
    @NotNull
    public PgConversionRecord value5(@NotNull Integer value) {
        setConforencoding(value);
        return this;
    }

    @Override
    @NotNull
    public PgConversionRecord value6(@NotNull Integer value) {
        setContoencoding(value);
        return this;
    }

    @Override
    @NotNull
    public PgConversionRecord value7(@NotNull String value) {
        setConproc(value);
        return this;
    }

    @Override
    @NotNull
    public PgConversionRecord value8(@NotNull Boolean value) {
        setCondefault(value);
        return this;
    }

    @Override
    @NotNull
    public PgConversionRecord values(@NotNull Long value1, @NotNull String value2, @NotNull Long value3, @NotNull Long value4, @NotNull Integer value5, @NotNull Integer value6, @NotNull String value7, @NotNull Boolean value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PgConversionRecord
     */
    public PgConversionRecord() {
        super(PgConversion.PG_CONVERSION);
    }

    /**
     * Create a detached, initialised PgConversionRecord
     */
    @ConstructorProperties({ "oid", "conname", "connamespace", "conowner", "conforencoding", "contoencoding", "conproc", "condefault" })
    public PgConversionRecord(@NotNull Long oid, @NotNull String conname, @NotNull Long connamespace, @NotNull Long conowner, @NotNull Integer conforencoding, @NotNull Integer contoencoding, @NotNull String conproc, @NotNull Boolean condefault) {
        super(PgConversion.PG_CONVERSION);

        setOid(oid);
        setConname(conname);
        setConnamespace(connamespace);
        setConowner(conowner);
        setConforencoding(conforencoding);
        setContoencoding(contoencoding);
        setConproc(conproc);
        setCondefault(condefault);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PgConversionRecord
     */
    public PgConversionRecord(edu.java.domain.jooq.pg_catalog.tables.pojos.PgConversion value) {
        super(PgConversion.PG_CONVERSION);

        if (value != null) {
            setOid(value.getOid());
            setConname(value.getConname());
            setConnamespace(value.getConnamespace());
            setConowner(value.getConowner());
            setConforencoding(value.getConforencoding());
            setContoencoding(value.getContoencoding());
            setConproc(value.getConproc());
            setCondefault(value.getCondefault());
            resetChangedOnNotNull();
        }
    }
}
