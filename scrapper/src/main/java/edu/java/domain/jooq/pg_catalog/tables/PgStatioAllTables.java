/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgStatioAllTablesRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatioAllTables extends TableImpl<PgStatioAllTablesRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgStatioAllTables PG_STATIO_ALL_TABLES = new PgStatioAllTables();

    @Override
    @NotNull
    public Class<PgStatioAllTablesRecord> getRecordType() {
        return PgStatioAllTablesRecord.class;
    }

    public final TableField<PgStatioAllTablesRecord, Long> RELID = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatioAllTablesRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgStatioAllTablesRecord, String> RELNAME = createField(DSL.name("relname"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgStatioAllTablesRecord, Long> HEAP_BLKS_READ = createField(DSL.name("heap_blks_read"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatioAllTablesRecord, Long> HEAP_BLKS_HIT = createField(DSL.name("heap_blks_hit"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatioAllTablesRecord, Long> IDX_BLKS_READ = createField(DSL.name("idx_blks_read"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatioAllTablesRecord, Long> IDX_BLKS_HIT = createField(DSL.name("idx_blks_hit"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatioAllTablesRecord, Long> TOAST_BLKS_READ = createField(DSL.name("toast_blks_read"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatioAllTablesRecord, Long> TOAST_BLKS_HIT = createField(DSL.name("toast_blks_hit"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatioAllTablesRecord, Long> TIDX_BLKS_READ = createField(DSL.name("tidx_blks_read"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatioAllTablesRecord, Long> TIDX_BLKS_HIT = createField(DSL.name("tidx_blks_hit"), SQLDataType.BIGINT, this, "");

    private PgStatioAllTables(Name alias, Table<PgStatioAllTablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatioAllTables(Name alias, Table<PgStatioAllTablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_statio_all_tables" as  SELECT c.oid AS relid,
          n.nspname AS schemaname,
          c.relname,
          (pg_stat_get_blocks_fetched(c.oid) - pg_stat_get_blocks_hit(c.oid)) AS heap_blks_read,
          pg_stat_get_blocks_hit(c.oid) AS heap_blks_hit,
          i.idx_blks_read,
          i.idx_blks_hit,
          (pg_stat_get_blocks_fetched(t.oid) - pg_stat_get_blocks_hit(t.oid)) AS toast_blks_read,
          pg_stat_get_blocks_hit(t.oid) AS toast_blks_hit,
          x.idx_blks_read AS tidx_blks_read,
          x.idx_blks_hit AS tidx_blks_hit
         FROM ((((pg_class c
           LEFT JOIN pg_class t ON ((c.reltoastrelid = t.oid)))
           LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
           LEFT JOIN LATERAL ( SELECT (sum((pg_stat_get_blocks_fetched(pg_index.indexrelid) - pg_stat_get_blocks_hit(pg_index.indexrelid))))::bigint AS idx_blks_read,
                  (sum(pg_stat_get_blocks_hit(pg_index.indexrelid)))::bigint AS idx_blks_hit
                 FROM pg_index
                WHERE (pg_index.indrelid = c.oid)) i ON (true))
           LEFT JOIN LATERAL ( SELECT (sum((pg_stat_get_blocks_fetched(pg_index.indexrelid) - pg_stat_get_blocks_hit(pg_index.indexrelid))))::bigint AS idx_blks_read,
                  (sum(pg_stat_get_blocks_hit(pg_index.indexrelid)))::bigint AS idx_blks_hit
                 FROM pg_index
                WHERE (pg_index.indrelid = t.oid)) x ON (true))
        WHERE (c.relkind = ANY (ARRAY['r'::"char", 't'::"char", 'm'::"char"]));
        """));
    }

    public PgStatioAllTables(String alias) {
        this(DSL.name(alias), PG_STATIO_ALL_TABLES);
    }

    public PgStatioAllTables(Name alias) {
        this(alias, PG_STATIO_ALL_TABLES);
    }

    public PgStatioAllTables() {
        this(DSL.name("pg_statio_all_tables"), null);
    }

    public <O extends Record> PgStatioAllTables(Table<O> child, ForeignKey<O, PgStatioAllTablesRecord> key) {
        super(child, key, PG_STATIO_ALL_TABLES);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgStatioAllTables as(String alias) {
        return new PgStatioAllTables(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgStatioAllTables as(Name alias) {
        return new PgStatioAllTables(alias, this);
    }

    @Override
    @NotNull
    public PgStatioAllTables as(Table<?> alias) {
        return new PgStatioAllTables(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgStatioAllTables rename(String name) {
        return new PgStatioAllTables(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgStatioAllTables rename(Name name) {
        return new PgStatioAllTables(name, null);
    }

    @Override
    @NotNull
    public PgStatioAllTables rename(Table<?> name) {
        return new PgStatioAllTables(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row11<Long, String, String, Long, Long, Long, Long, Long, Long, Long, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    public <U> SelectField<U> mapping(Function11<? super Long, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
