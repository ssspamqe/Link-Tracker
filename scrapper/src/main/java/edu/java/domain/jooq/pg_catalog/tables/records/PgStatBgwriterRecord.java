/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables.records;


import edu.java.domain.jooq.pg_catalog.tables.PgStatBgwriter;

import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.TableRecordImpl;


/**
 * The table <code>pg_catalog.pg_stat_bgwriter</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatBgwriterRecord extends TableRecordImpl<PgStatBgwriterRecord> implements Record11<Long, Long, Double, Double, Long, Long, Long, Long, Long, Long, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.checkpoints_timed</code>.
     */
    public void setCheckpointsTimed(@Nullable Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.checkpoints_timed</code>.
     */
    @Nullable
    public Long getCheckpointsTimed() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.checkpoints_req</code>.
     */
    public void setCheckpointsReq(@Nullable Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.checkpoints_req</code>.
     */
    @Nullable
    public Long getCheckpointsReq() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_bgwriter.checkpoint_write_time</code>.
     */
    public void setCheckpointWriteTime(@Nullable Double value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_bgwriter.checkpoint_write_time</code>.
     */
    @Nullable
    public Double getCheckpointWriteTime() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.checkpoint_sync_time</code>.
     */
    public void setCheckpointSyncTime(@Nullable Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.checkpoint_sync_time</code>.
     */
    @Nullable
    public Double getCheckpointSyncTime() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.buffers_checkpoint</code>.
     */
    public void setBuffersCheckpoint(@Nullable Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.buffers_checkpoint</code>.
     */
    @Nullable
    public Long getBuffersCheckpoint() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.buffers_clean</code>.
     */
    public void setBuffersClean(@Nullable Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.buffers_clean</code>.
     */
    @Nullable
    public Long getBuffersClean() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.maxwritten_clean</code>.
     */
    public void setMaxwrittenClean(@Nullable Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.maxwritten_clean</code>.
     */
    @Nullable
    public Long getMaxwrittenClean() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.buffers_backend</code>.
     */
    public void setBuffersBackend(@Nullable Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.buffers_backend</code>.
     */
    @Nullable
    public Long getBuffersBackend() {
        return (Long) get(7);
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_bgwriter.buffers_backend_fsync</code>.
     */
    public void setBuffersBackendFsync(@Nullable Long value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_bgwriter.buffers_backend_fsync</code>.
     */
    @Nullable
    public Long getBuffersBackendFsync() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.buffers_alloc</code>.
     */
    public void setBuffersAlloc(@Nullable Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.buffers_alloc</code>.
     */
    @Nullable
    public Long getBuffersAlloc() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.stats_reset</code>.
     */
    public void setStatsReset(@Nullable OffsetDateTime value) {
        set(10, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.stats_reset</code>.
     */
    @Nullable
    public OffsetDateTime getStatsReset() {
        return (OffsetDateTime) get(10);
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row11<Long, Long, Double, Double, Long, Long, Long, Long, Long, Long, OffsetDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row11<Long, Long, Double, Double, Long, Long, Long, Long, Long, Long, OffsetDateTime> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return PgStatBgwriter.PG_STAT_BGWRITER.CHECKPOINTS_TIMED;
    }

    @Override
    @NotNull
    public Field<Long> field2() {
        return PgStatBgwriter.PG_STAT_BGWRITER.CHECKPOINTS_REQ;
    }

    @Override
    @NotNull
    public Field<Double> field3() {
        return PgStatBgwriter.PG_STAT_BGWRITER.CHECKPOINT_WRITE_TIME;
    }

    @Override
    @NotNull
    public Field<Double> field4() {
        return PgStatBgwriter.PG_STAT_BGWRITER.CHECKPOINT_SYNC_TIME;
    }

    @Override
    @NotNull
    public Field<Long> field5() {
        return PgStatBgwriter.PG_STAT_BGWRITER.BUFFERS_CHECKPOINT;
    }

    @Override
    @NotNull
    public Field<Long> field6() {
        return PgStatBgwriter.PG_STAT_BGWRITER.BUFFERS_CLEAN;
    }

    @Override
    @NotNull
    public Field<Long> field7() {
        return PgStatBgwriter.PG_STAT_BGWRITER.MAXWRITTEN_CLEAN;
    }

    @Override
    @NotNull
    public Field<Long> field8() {
        return PgStatBgwriter.PG_STAT_BGWRITER.BUFFERS_BACKEND;
    }

    @Override
    @NotNull
    public Field<Long> field9() {
        return PgStatBgwriter.PG_STAT_BGWRITER.BUFFERS_BACKEND_FSYNC;
    }

    @Override
    @NotNull
    public Field<Long> field10() {
        return PgStatBgwriter.PG_STAT_BGWRITER.BUFFERS_ALLOC;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field11() {
        return PgStatBgwriter.PG_STAT_BGWRITER.STATS_RESET;
    }

    @Override
    @Nullable
    public Long component1() {
        return getCheckpointsTimed();
    }

    @Override
    @Nullable
    public Long component2() {
        return getCheckpointsReq();
    }

    @Override
    @Nullable
    public Double component3() {
        return getCheckpointWriteTime();
    }

    @Override
    @Nullable
    public Double component4() {
        return getCheckpointSyncTime();
    }

    @Override
    @Nullable
    public Long component5() {
        return getBuffersCheckpoint();
    }

    @Override
    @Nullable
    public Long component6() {
        return getBuffersClean();
    }

    @Override
    @Nullable
    public Long component7() {
        return getMaxwrittenClean();
    }

    @Override
    @Nullable
    public Long component8() {
        return getBuffersBackend();
    }

    @Override
    @Nullable
    public Long component9() {
        return getBuffersBackendFsync();
    }

    @Override
    @Nullable
    public Long component10() {
        return getBuffersAlloc();
    }

    @Override
    @Nullable
    public OffsetDateTime component11() {
        return getStatsReset();
    }

    @Override
    @Nullable
    public Long value1() {
        return getCheckpointsTimed();
    }

    @Override
    @Nullable
    public Long value2() {
        return getCheckpointsReq();
    }

    @Override
    @Nullable
    public Double value3() {
        return getCheckpointWriteTime();
    }

    @Override
    @Nullable
    public Double value4() {
        return getCheckpointSyncTime();
    }

    @Override
    @Nullable
    public Long value5() {
        return getBuffersCheckpoint();
    }

    @Override
    @Nullable
    public Long value6() {
        return getBuffersClean();
    }

    @Override
    @Nullable
    public Long value7() {
        return getMaxwrittenClean();
    }

    @Override
    @Nullable
    public Long value8() {
        return getBuffersBackend();
    }

    @Override
    @Nullable
    public Long value9() {
        return getBuffersBackendFsync();
    }

    @Override
    @Nullable
    public Long value10() {
        return getBuffersAlloc();
    }

    @Override
    @Nullable
    public OffsetDateTime value11() {
        return getStatsReset();
    }

    @Override
    @NotNull
    public PgStatBgwriterRecord value1(@Nullable Long value) {
        setCheckpointsTimed(value);
        return this;
    }

    @Override
    @NotNull
    public PgStatBgwriterRecord value2(@Nullable Long value) {
        setCheckpointsReq(value);
        return this;
    }

    @Override
    @NotNull
    public PgStatBgwriterRecord value3(@Nullable Double value) {
        setCheckpointWriteTime(value);
        return this;
    }

    @Override
    @NotNull
    public PgStatBgwriterRecord value4(@Nullable Double value) {
        setCheckpointSyncTime(value);
        return this;
    }

    @Override
    @NotNull
    public PgStatBgwriterRecord value5(@Nullable Long value) {
        setBuffersCheckpoint(value);
        return this;
    }

    @Override
    @NotNull
    public PgStatBgwriterRecord value6(@Nullable Long value) {
        setBuffersClean(value);
        return this;
    }

    @Override
    @NotNull
    public PgStatBgwriterRecord value7(@Nullable Long value) {
        setMaxwrittenClean(value);
        return this;
    }

    @Override
    @NotNull
    public PgStatBgwriterRecord value8(@Nullable Long value) {
        setBuffersBackend(value);
        return this;
    }

    @Override
    @NotNull
    public PgStatBgwriterRecord value9(@Nullable Long value) {
        setBuffersBackendFsync(value);
        return this;
    }

    @Override
    @NotNull
    public PgStatBgwriterRecord value10(@Nullable Long value) {
        setBuffersAlloc(value);
        return this;
    }

    @Override
    @NotNull
    public PgStatBgwriterRecord value11(@Nullable OffsetDateTime value) {
        setStatsReset(value);
        return this;
    }

    @Override
    @NotNull
    public PgStatBgwriterRecord values(@Nullable Long value1, @Nullable Long value2, @Nullable Double value3, @Nullable Double value4, @Nullable Long value5, @Nullable Long value6, @Nullable Long value7, @Nullable Long value8, @Nullable Long value9, @Nullable Long value10, @Nullable OffsetDateTime value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PgStatBgwriterRecord
     */
    public PgStatBgwriterRecord() {
        super(PgStatBgwriter.PG_STAT_BGWRITER);
    }

    /**
     * Create a detached, initialised PgStatBgwriterRecord
     */
    @ConstructorProperties({ "checkpointsTimed", "checkpointsReq", "checkpointWriteTime", "checkpointSyncTime", "buffersCheckpoint", "buffersClean", "maxwrittenClean", "buffersBackend", "buffersBackendFsync", "buffersAlloc", "statsReset" })
    public PgStatBgwriterRecord(@Nullable Long checkpointsTimed, @Nullable Long checkpointsReq, @Nullable Double checkpointWriteTime, @Nullable Double checkpointSyncTime, @Nullable Long buffersCheckpoint, @Nullable Long buffersClean, @Nullable Long maxwrittenClean, @Nullable Long buffersBackend, @Nullable Long buffersBackendFsync, @Nullable Long buffersAlloc, @Nullable OffsetDateTime statsReset) {
        super(PgStatBgwriter.PG_STAT_BGWRITER);

        setCheckpointsTimed(checkpointsTimed);
        setCheckpointsReq(checkpointsReq);
        setCheckpointWriteTime(checkpointWriteTime);
        setCheckpointSyncTime(checkpointSyncTime);
        setBuffersCheckpoint(buffersCheckpoint);
        setBuffersClean(buffersClean);
        setMaxwrittenClean(maxwrittenClean);
        setBuffersBackend(buffersBackend);
        setBuffersBackendFsync(buffersBackendFsync);
        setBuffersAlloc(buffersAlloc);
        setStatsReset(statsReset);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PgStatBgwriterRecord
     */
    public PgStatBgwriterRecord(edu.java.domain.jooq.pg_catalog.tables.pojos.PgStatBgwriter value) {
        super(PgStatBgwriter.PG_STAT_BGWRITER);

        if (value != null) {
            setCheckpointsTimed(value.getCheckpointsTimed());
            setCheckpointsReq(value.getCheckpointsReq());
            setCheckpointWriteTime(value.getCheckpointWriteTime());
            setCheckpointSyncTime(value.getCheckpointSyncTime());
            setBuffersCheckpoint(value.getBuffersCheckpoint());
            setBuffersClean(value.getBuffersClean());
            setMaxwrittenClean(value.getMaxwrittenClean());
            setBuffersBackend(value.getBuffersBackend());
            setBuffersBackendFsync(value.getBuffersBackendFsync());
            setBuffersAlloc(value.getBuffersAlloc());
            setStatsReset(value.getStatsReset());
            resetChangedOnNotNull();
        }
    }
}
