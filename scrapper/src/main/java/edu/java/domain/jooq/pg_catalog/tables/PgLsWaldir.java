/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgLsWaldirRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>pg_catalog.pg_ls_waldir</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgLsWaldir extends TableImpl<PgLsWaldirRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_ls_waldir</code>
     */
    public static final PgLsWaldir PG_LS_WALDIR = new PgLsWaldir();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PgLsWaldirRecord> getRecordType() {
        return PgLsWaldirRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_ls_waldir.name</code>.
     */
    public final TableField<PgLsWaldirRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_ls_waldir.size</code>.
     */
    public final TableField<PgLsWaldirRecord, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_ls_waldir.modification</code>.
     */
    public final TableField<PgLsWaldirRecord, OffsetDateTime> MODIFICATION = createField(DSL.name("modification"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgLsWaldir(Name alias, Table<PgLsWaldirRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private PgLsWaldir(Name alias, Table<PgLsWaldirRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ls_waldir</code> table reference
     */
    public PgLsWaldir(String alias) {
        this(DSL.name(alias), PG_LS_WALDIR);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ls_waldir</code> table reference
     */
    public PgLsWaldir(Name alias) {
        this(alias, PG_LS_WALDIR);
    }

    /**
     * Create a <code>pg_catalog.pg_ls_waldir</code> table reference
     */
    public PgLsWaldir() {
        this(DSL.name("pg_ls_waldir"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgLsWaldir as(String alias) {
        return new PgLsWaldir(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public PgLsWaldir as(Name alias) {
        return new PgLsWaldir(alias, this, parameters);
    }

    @Override
    @NotNull
    public PgLsWaldir as(Table<?> alias) {
        return new PgLsWaldir(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgLsWaldir rename(String name) {
        return new PgLsWaldir(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgLsWaldir rename(Name name) {
        return new PgLsWaldir(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgLsWaldir rename(Table<?> name) {
        return new PgLsWaldir(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<String, Long, OffsetDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public PgLsWaldir call() {
        PgLsWaldir result = new PgLsWaldir(DSL.name("pg_ls_waldir"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super Long, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super Long, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
