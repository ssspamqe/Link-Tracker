/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.routines;


import edu.java.domain.jooq.pg_catalog.PgCatalog;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;



@Deprecated
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JsonPopulateRecord extends AbstractRoutine<Object> {

    private static final long serialVersionUID = 1L;

    @Deprecated
    public static final Parameter<Object> RETURN_VALUE = Internal.createParameter("RETURN_VALUE", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\""), false, false);

    @Deprecated
    public static final Parameter<Object> BASE = Internal.createParameter("base", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\""), false, false);

    public static final Parameter<JSON> FROM_JSON = Internal.createParameter("from_json", SQLDataType.JSON, false, false);

    public static final Parameter<Boolean> USE_JSON_AS_TEXT = Internal.createParameter("use_json_as_text", SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), true, false);

    public JsonPopulateRecord() {
        super("json_populate_record", PgCatalog.PG_CATALOG, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\""));

        setReturnParameter(RETURN_VALUE);
        addInParameter(BASE);
        addInParameter(FROM_JSON);
        addInParameter(USE_JSON_AS_TEXT);
    }

    public void setBase(Object value) {
        setValue(BASE, value);
    }

    public void setBase(Field<Object> field) {
        setField(BASE, field);
    }

    public void setFromJson(JSON value) {
        setValue(FROM_JSON, value);
    }

    public void setFromJson(Field<JSON> field) {
        setField(FROM_JSON, field);
    }

    public void setUseJsonAsText(Boolean value) {
        setValue(USE_JSON_AS_TEXT, value);
    }

    public void setUseJsonAsText(Field<Boolean> field) {
        setField(USE_JSON_AS_TEXT, field);
    }
}
