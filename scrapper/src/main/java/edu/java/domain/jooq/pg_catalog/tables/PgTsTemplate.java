/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.Keys;
import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgTsTemplateRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>pg_catalog.pg_ts_template</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgTsTemplate extends TableImpl<PgTsTemplateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_ts_template</code>
     */
    public static final PgTsTemplate PG_TS_TEMPLATE = new PgTsTemplate();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PgTsTemplateRecord> getRecordType() {
        return PgTsTemplateRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_ts_template.oid</code>.
     */
    public final TableField<PgTsTemplateRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_template.tmplname</code>.
     */
    public final TableField<PgTsTemplateRecord, String> TMPLNAME = createField(DSL.name("tmplname"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_template.tmplnamespace</code>.
     */
    public final TableField<PgTsTemplateRecord, Long> TMPLNAMESPACE = createField(DSL.name("tmplnamespace"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_template.tmplinit</code>.
     */
    public final TableField<PgTsTemplateRecord, String> TMPLINIT = createField(DSL.name("tmplinit"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_template.tmpllexize</code>.
     */
    public final TableField<PgTsTemplateRecord, String> TMPLLEXIZE = createField(DSL.name("tmpllexize"), SQLDataType.VARCHAR.nullable(false), this, "");

    private PgTsTemplate(Name alias, Table<PgTsTemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgTsTemplate(Name alias, Table<PgTsTemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_template</code> table reference
     */
    public PgTsTemplate(String alias) {
        this(DSL.name(alias), PG_TS_TEMPLATE);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_template</code> table reference
     */
    public PgTsTemplate(Name alias) {
        this(alias, PG_TS_TEMPLATE);
    }

    /**
     * Create a <code>pg_catalog.pg_ts_template</code> table reference
     */
    public PgTsTemplate() {
        this(DSL.name("pg_ts_template"), null);
    }

    public <O extends Record> PgTsTemplate(Table<O> child, ForeignKey<O, PgTsTemplateRecord> key) {
        super(child, key, PG_TS_TEMPLATE);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public UniqueKey<PgTsTemplateRecord> getPrimaryKey() {
        return Keys.PG_TS_TEMPLATE_OID_INDEX;
    }

    @Override
    @NotNull
    public List<UniqueKey<PgTsTemplateRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_TS_TEMPLATE_TMPLNAME_INDEX);
    }

    @Override
    @NotNull
    public PgTsTemplate as(String alias) {
        return new PgTsTemplate(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgTsTemplate as(Name alias) {
        return new PgTsTemplate(alias, this);
    }

    @Override
    @NotNull
    public PgTsTemplate as(Table<?> alias) {
        return new PgTsTemplate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgTsTemplate rename(String name) {
        return new PgTsTemplate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgTsTemplate rename(Name name) {
        return new PgTsTemplate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PgTsTemplate rename(Table<?> name) {
        return new PgTsTemplate(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row5<Long, String, Long, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
