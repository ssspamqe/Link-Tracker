/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.information_schema.tables;


import edu.java.domain.jooq.information_schema.InformationSchema;
import edu.java.domain.jooq.information_schema.tables.records.ApplicableRolesRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ApplicableRoles extends TableImpl<ApplicableRolesRecord> {

    private static final long serialVersionUID = 1L;

    public static final ApplicableRoles APPLICABLE_ROLES = new ApplicableRoles();

    @Override
    @NotNull
    public Class<ApplicableRolesRecord> getRecordType() {
        return ApplicableRolesRecord.class;
    }

    public final TableField<ApplicableRolesRecord, String> GRANTEE = createField(DSL.name("grantee"), edu.java.domain.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    public final TableField<ApplicableRolesRecord, String> ROLE_NAME = createField(DSL.name("role_name"), edu.java.domain.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    public final TableField<ApplicableRolesRecord, String> IS_GRANTABLE = createField(DSL.name("is_grantable"), edu.java.domain.jooq.information_schema.Domains.YES_OR_NO.getDataType(), this, "");

    private ApplicableRoles(Name alias, Table<ApplicableRolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApplicableRoles(Name alias, Table<ApplicableRolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "applicable_roles" as  SELECT (a.rolname)::information_schema.sql_identifier AS grantee,
          (b.rolname)::information_schema.sql_identifier AS role_name,
          (
              CASE
                  WHEN m.admin_option THEN 'YES'::text
                  ELSE 'NO'::text
              END)::information_schema.yes_or_no AS is_grantable
         FROM ((( SELECT pg_auth_members.member,
                  pg_auth_members.roleid,
                  pg_auth_members.admin_option
                 FROM pg_auth_members
              UNION
               SELECT pg_database.datdba,
                  pg_authid.oid,
                  false
                 FROM pg_database,
                  pg_authid
                WHERE ((pg_database.datname = current_database()) AND (pg_authid.rolname = 'pg_database_owner'::name))) m
           JOIN pg_authid a ON ((m.member = a.oid)))
           JOIN pg_authid b ON ((m.roleid = b.oid)))
        WHERE pg_has_role(a.oid, 'USAGE'::text);
        """));
    }

    public ApplicableRoles(String alias) {
        this(DSL.name(alias), APPLICABLE_ROLES);
    }

    public ApplicableRoles(Name alias) {
        this(alias, APPLICABLE_ROLES);
    }

    public ApplicableRoles() {
        this(DSL.name("applicable_roles"), null);
    }

    public <O extends Record> ApplicableRoles(Table<O> child, ForeignKey<O, ApplicableRolesRecord> key) {
        super(child, key, APPLICABLE_ROLES);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    @NotNull
    public ApplicableRoles as(String alias) {
        return new ApplicableRoles(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public ApplicableRoles as(Name alias) {
        return new ApplicableRoles(alias, this);
    }

    @Override
    @NotNull
    public ApplicableRoles as(Table<?> alias) {
        return new ApplicableRoles(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public ApplicableRoles rename(String name) {
        return new ApplicableRoles(DSL.name(name), null);
    }

    @Override
    @NotNull
    public ApplicableRoles rename(Name name) {
        return new ApplicableRoles(name, null);
    }

    @Override
    @NotNull
    public ApplicableRoles rename(Table<?> name) {
        return new ApplicableRoles(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
